[{"content":"这一次，我们终于沦为了杀戮武器——S3E5\n这篇剧评可能有剧透.\n主题非常适合在日常生活高频接触各种媒体的我们。学习媒介素养，就是“学习如何利用媒介来实现我们的目标，而不是被媒介利用去实现他们目标”。这句话对于理解黑镜S3E5的剧情非常有帮助。\n【“蟑螂”】 这次的剧情放在了战争年代，讲述了人类和“蟑螂”的战争（有看过“火星异种”漫画的童鞋一定觉得很熟悉，可惜这里的蟑螂不是那种有逆天能力的怪物），蟑螂是血液中含有传染病毒的变异人类，流窜在各个地方，经常会去偷袭村民窃取物资，给正常人类的生活带来实实在在的威胁。因此政府组建了一支军队负责保卫人类，扑杀尚在逃忙的蟑螂。政府的军队最酷的地方就在于，他们的士兵都在脑中植入了名为“麦斯”的控制系统（估计是芯片什么的），麦斯可以接收从无人机、电脑等其他电子设备的图像信息，并且在使用者的眼前投放出来。简单来说就是把一个VR显示器内置在你的脑中了。拥有着高科技设备的士兵们，怎么说也得遇上势均力敌的对手。我吃饭的时候还担心“蟑螂”会不会太恶心，要是被爆头喷了屏幕一脸怎么办？事实证明我的担心是多余的。\n长得真像伏地魔，牙尖嘴细，双眼空空彷如黑洞，脸色苍白，在惊恐中发出嘶嘶刺耳的尖叫声。“蟑螂”并没有想象中的强大，身上也没有变异的地方，除了长得丑了点其他和普通人无异。我们的主角斯崔普第一次出勤就干掉了两只“蟑螂”，连神枪手妹子都夸他牛逼。可是，小斯在和“蟑螂”搏斗中被一支闪光笔照了一下，回到基地后脑子就不清醒了。第二次出勤，队长台词还没念完就被蟑螂拿着步枪爆头了。小斯带着恐惧和懵逼的脑子冲进废弃的房子里，却发现，没有蟑螂。哪里都是人，分明是脸色苍白的人，在求救声中逃亡。小斯彻底懵逼了。他阻止了开枪射杀平民的队友，保护平民逃离废楼，从平民的口中听到了事实的真相，令他崩溃的真相。\n【污名化】 我想没有人会忘记二战期间纳粹是如何屠杀犹太人的。纳粹党斥责犹太人是披着商人外衣的骗子，是道德败坏的社会毒瘤，为了人类的未来势要将其斩草除根，统统消灭。可实际上，犹太人聪明、勤奋，凭着多年的努力在欧洲建立了非常好的声誉，招致了权贵的嫉恨。古人云，师出有名，想要打压犹太人就必须给他们按上罪名，将他们贬为社会的公敌，引起大家的仇恨，然后就能理所当然地动用军事力量屠杀犹太人了。昨日的历史在这里再次重现，所谓的“蟑螂”实际上是带有遗传病基因的平民，经过基因检查后被驱逐、击杀，终日生活在黑暗中惶惶不可天日。政府同样用的是那一套污名化的手段，在历史教育中给人们洗脑，给这些流放者按上“病毒携带者”的污名，煽动人们的仇恨，鼓励全民追杀蟑螂。当年纳粹同样鼓吹“血统论”，认为雅利安人种是神的选民，他们日耳曼人作为雅利安人的后代应该统治世界，而不是被其他人种欺压。希特勒借助其高超的演讲技巧和煽情的表演，将这套血统论深深地刻在了德国人民的脑海中，培养了一批忠诚的追随者，为他的独裁统治打下了坚实的基础。可见，如果政府想要独揽大权，消灭一切反对的声音和力量，只需要将反对者污名化，再动员民众仇视反对者就已经成功了一半了。人们成为了独裁的帮凶，独立自由的声音淹没在狂热的游行和支持声中。\n【去同情心】 而要彻底实现独裁，还必须拥有无比忠心、杀人不眨眼的军队。麦斯就是为此而诞生的。正如前文所说，麦斯是植入脑中的系统，不仅可以接收图像，更重要的是，它可以控制士兵的视觉、听觉和嗅觉。光有政府的洗脑告诉你那些衣衫褴褛的平民是怪物是不够的，想要士兵在毫无心理压力的情况下击杀平民还需要另外的因素——恐惧。为了使士兵开枪更果断，麦斯会把“蟑螂”的模样加工地非常可怕，并且把呼救声变为刺耳的尖叫声，给士兵带来实实在在的恐惧。人们为解除恐惧，普遍会采取攻击手段自卫，这就给了士兵们射杀蟑螂一个合理的理由——它们不是人，我为了保护自己必须要杀死它们。加上平时被灌输的仇恨在遇见蟑螂的一刻被倾泻出来。一个物种对另一个物种的厌恶瞬间激发了这群士兵的愤怒，他们毫不犹豫地开枪扫射手无寸铁的“蟑螂”们。\n在我看来，最可怕的不是政府的洗脑，而是麦斯系统的控制。普通士兵们在射杀平民时会犹豫是因为他们内心还留有同情心，他们能感受到那是一个个鲜活的生命，那是一个家庭最后的希望，那个孩子和自己的小孩也许有着同样的年龄，每一次扣下扳机都将使他们的内心备受煎熬。越南战役中不少美军士兵在战争结束后有严重的心理问题，很大程度上是因为被迫于上级的压力，他们将炮弹投向了越南无辜的民众中。即使事后他们用国家存亡、士兵责任的借口来安慰自己也没办法逃脱良心的追责。现在，麦斯系统使得同情心不再起作用，士兵们无一例外成为听从政府摆布的强力武器，指谁杀谁，丝毫没有心理压力。这一次，他们终于成为了杀戮武器。可谁能保证，这种悲剧不会在我们身上发生？\n【媒介控制】 黑镜的每一集都在渗透高科技媒介对人的影响，内置视觉控制器并不新奇。但这一集是最为可怕的，因为这个控制器不受我们自己控制，它受其他人控制可以任意改变我们看到的客观现实。我们已经成为沦为了媒介的傀儡，彻底成为了媒介实现目标的工具。仔细想想，才发现这种科技更像是AR的升级版。AR是对现实世界的加工，把虚拟的影像投射在真实的人和物上面。真的很庆幸现在的我们还可以扔扔精灵球在草坪上收服可爱的比卡丘，试想一下如果有一天，我们身边人都变成了巨型的老鼠，身上布满黄色绒毛，后面拖着一条曲折的尾巴，投出的精灵球变成极具杀伤力的手榴弹，我们扮演的是正义的宠物小精灵饲养员还是听从命令负责回收怪物的战士？\n 这就是备受推崇的准将塞缪尔·莱曼·阿特伍德·马歇尔（Samuel Lyman Atwood Marshall）准将，也就是众所周知的 SLA Marshall 或“大满贯”，在一系列军事期刊文章和他的著作 《抗火之人》 中关于美国二战士兵的结论。\n大约 20 年后，马歇尔分析的有效性受到质疑。 受人尊敬的研究人员采访了那些在第二次世界大战中陪伴他的人，并仔细研究了他在 1980 年代中期的个人笔记。 令人信服的证据表明，他捏造了他在二战中的火力比值，当时仍然被广泛接受。 这个问题似乎不可避免： 美国人 在二战中与敌人交战的意愿是否存在问题？ 如果是这样，它是否真的像马歇尔所说的那样在越南战争期间得到了纠正，还是在那里进行的研究与四分之一世纪前的情况一样存在缺陷？\n尽管马歇尔失宠，但还是有人同意他的观点。 这个问题非常重要，足以进行严格调查。 由于越南是美国最近的一场战争，其退伍军人是能够为解决开火意愿的关键问题提供答案的人。 最终，正是他们的反应构成了详细研究这个问题以及训练、12 个月轮换和 6 个月指挥巡回对美国战士作战表现的影响的基础。 该研究的结果于 2000 年发表在《 阅读雅典娜的舞卡：越南人对抗火 。 本文总结了与男性是否开枪以及影响他们开枪意愿的因素有关的调查结果。\n只有 9 名第 1 骑兵师老兵报告说他们从未亲自向敌人开火，这与马歇尔所写的太平洋和欧洲的情况大不相同。 但有些人可能会怀疑，一个人在受到抨击时会犹豫承认自己的缺点。 因此，退伍军人也被要求反思他们的战友的表现。 当被问及在任何特定交战中他们的战友中有多少开火时，退伍军人估计，一个单位中大约 84% 的士兵配备了单兵武器（步枪、手枪、榴弹发射器、霰弹枪），而大约 90% 的人员配备了武器（通常是 M-60 机枪）这样做了。\n从这些反应来看，越南的美国人似乎毫不犹豫地与他们的敌人交战。 然而，这些退伍军人的观察提出了一个问题，即为什么平均每 10 名男子中有近两名在他们的部队接触时没有开火。 明显的问题并不像马歇尔在二战中报告的那样严重，但失去这么多士兵的火力仍然不是一件小事。 在一个拥有 500 名步兵的单位中，大约 80 名步兵不会参与。 与马歇尔工作中的数字不同，这些估计直接来自在越南城市、丛林、火力基地和稻田中作战的人。 男子反火：越南战争期间有多少士兵向敌人发射武器\nRoger J. Spiller 教授（美国陆军指挥与参谋学院战斗研究所副所长）在他 1988 年的文章“SLA 马歇尔和火力比”中指出，马歇尔实际上并未进行他所依据的研究他的火力比理论。 “‘系统地收集数据’似乎是一项发明。” 这一启示对马歇尔其他一些书籍的真实性提出了质疑，并为几十年前在军事界提出的对他正直的怀疑提供了学术力量。 杀戮学 - 维基百科\n 迷你剧 《兄弟连 讲述了一个不愿开枪的士兵的场景，这对这一现象有所启发。 最终，士兵学会了战斗。 在该系列中，他在自愿从事危险工作后痛苦而挥之不去地死去，但在现实生活中，他康复并在韩国服役。 在他艰难的开始之后，他成为了一名受人尊敬的士兵。 在韩国，他获得了一枚银星和两枚紫心勋章。 具有讽刺意味的是，他于 1967 年在德国因自然原因去世。在他的军队生涯中，他的军衔稳步上升。 阿尔伯特·布莱特 - 维基百科\n仍然有 16% 的步枪手没有开枪，而军方已经通过改进灌输和培训来解决这种可能性。 马歇尔的工作，即使在很大程度上是捏造的，也确实对军事训练产生了积极影响。\n 许多早期训练都是使用靶心目标完成的。 但在越南战争期间，他们开始使用人影目标。 刺刀练习，一些人认为过时的武器被教导用来对敌人进行侵略，而不一定期望它在战场上使用。 这样做是为了使个人对杀戮不敏感。 陆军非常擅长模拟战斗，越南的杀伤率要高得多。 杀手本能; 在过去的战争中，有多少士兵实际使用过武器？模拟和其他训练有什么帮助？ - 射击场产业\n ","permalink":"https://zweisamkeiten.github.io/posts/men-against-fire/","summary":"这一次，我们终于沦为了杀戮武器——S3E5 这篇剧评可能有剧透. 主题非常适合在日常生活高频接触各种媒体的我们。学习媒介素养，就是“学习如何利用","title":"Men Against Fire"},{"content":"简单地说就是他是被自己给吓死的，别看他玩过蹦极、恐怖游戏，其实他是在用这种刺激的方式来掩盖另一种胆小，所以他号称自己是“追求刺激者”，但是实际他才只撑过0.04s，在这部分人中，最怯懦的一个。\n在这里我将回答几个疑点： 1.为什么测试过程从5点38分开始持续了0.04秒，但是Cooper依然能有拍照的时间，并且墙上时钟显示是在5点39分做的？ 2.关于女友是否是斋藤公司的员工的阴谋论。 3.为什么梦境里有两层？ 4.什么使他彻底崩溃的？ 5.《奇点》（singularity）这本书和这个剧有什么关系？ 6.斋藤公司请他真的是为了探索内心恐惧的游戏测验吗？\n—————————————————此处应有分割线—————————————————— 首先，我想请大家关注关于这个公司的所有事实： Cooper回到Sonja的家里，想要找一份零作，在他常用的app上面，女友Sonja帮他挑了一个名字为“ thrilingseeker wanted招募寻求刺激者”的工作，雇主是斋藤科技，关于这个工作的描述，Katie是这样描述的：当他问到这是vr（虚拟现实）吗？Katie既没做肯定回答，也没做否定回答这几乎是Katie所说的关于这个公司和工作的全部内容了，之前是一些寒暄和提醒，之后是表达自己种植mushroom的技术高超（当然没有杀过人那句也是为下文留下伏笔，毕竟，最后Cooper死了\u0026hellip;.） 首先，斋藤公司的接待代表kaite从来没有告诉过他这是关于什么的测试，app简介里面只说了play test，甚至Katie从来没有提过game游戏，唯一提到游戏这个词的是Cooper，关于内容，Katie没有透漏任何信息， 关于这个测试，我们能从影片里得到的信息只有：这是一家曾经做过成功游戏《哈莱克魅影》的大型游戏公司，他们请Cooper来测试一个软件，一个play test，要求是喜欢刺激，需要在脑干下部的后颈位置植入一个mushroom，据工作人员介绍这个环境本该很安全，伤害很微小。测试内容是个交互式增强现实技术（ar）。\n为什么在潜意识里，Cooper会以为这是一个vr类型的恐怖内容的游戏测试呢？ 原因有三个： 1、《哈莱克魅影》是斋藤公司的作品，他曾经玩过，是个恐怖的游戏；2、暗示——在他来的一路上都是《哈莱克魅影》的宣传海报，在他等待的地方，在他上楼梯的路上。还有他来的一路上都是恐怖的符号暗示：工作人员T恤上的蜘蛛，工作人员在渲染古堡的外观和内景，正在制作的黑衣人，架子上的骷髅头，这些都让Cooper觉得这个新项目是和恐怖相关的；而他看到两个工作人员在凭空打字和画图的时候，他在觉得这个科技很酷的同时，也似乎隐隐觉得新项目一定和这个相关，很酷。3、不安和危险——Sonja曾经说斋藤公司在做一个有着前所未有的突破、神秘的新项目，；并且《edge》（悬崖）这本杂志封面上写“斋藤翔 fear him（惧怕他）”，并且他是想要来偷去最新科技信息的，他也害怕、很紧张，这些后来都变成恐怖游戏的原因。 (注意在所有现实中的对话和内容，都没有明显证据提到这是一个“游戏”，也没说和“恐惧”相关，app上的小字写了这是一个找寻喜欢刺激者来测试一个software软件，刺激有很多种，但是在Cooper的意识中这叫做“恐怖”)\n毕竟就在katie简短介绍了项目，然后运行了程序0.04s，Cooper就死掉了。所以从头盔的加载到15%的时候，后来的事情都只存在于Cooper的意识中，已经脱离现实了。（简单来说，就是打地鼠这个行为从一开始就不存在，至少不在现实中，到他从大喊得了阿尔海默茨症的妈妈回神，这之间发生的种种都只存在在意识中）不是太明白这点的童鞋看这里如何评价《Black Mirror》（黑镜）第三季第二集《Playtest》（游戏测试）？ - 张梦萦的回答\n—————————————————此处应有分割线——————————————————\n很多人都发现了raven这个名字第一次出现在Sonja和Cooper相识的酒吧招牌上面，后来变成Cooper记忆的一部分开始出现在他在古堡的奇遇中——一本书上，我看到有答友猜测说这是是恐怖小说鼻祖爱伦坡著名的一个恐怖故事，但是关于raven我有另外一个解释，和《singularity》相关，就是曾经有家叫做raven的公司设计了一个游戏叫做singularity\u0026hellip;.（欢迎答友在评论区普及一下相关知识） 证据有几点：1.Sonja的这本《奇点》（singularity）全名是《the brief guide to the singularity》（奇点的简介），它是摆放在一堆游戏简介里面的，根据答友的不完全统计有《侠盗猎魔》《死亡空间》《使命召唤10 幽灵》《寂静岭5 归途》《生化危机 启示录2》《生化奇兵2》《直到黎明》《暴雨》《传送门2》等等，都是在现实存在的游戏。《奇点》（singularity）确实是现实存在的游戏，它的公司是raven，有网友评价这个游戏是个“科幻级恐怖神作”。 2、所以Cooper才会问：“这是你的约会手册吗？”。因为Cooper is new here，作为一个美国人刚刚旅行来到这个国家，跟在社交app右滑认识的sonja，极有可能是sonja定的约见地点，而她定在了raven。\n3、另外大家可以去翻美国亚马逊的singularity关键词，没有一个是这样的封面，其中也没有作者叫做sadie。 4、《奇点》和影片中一直提到的《哈莱克魅影》都同属于恐怖游戏，从Cooper特意从一堆游戏中挑出这个来看，他似乎对恐怖游戏很有了解，所以可能是知道raven公司出品过《奇点》这个游戏的。\n—————————————————此处应有分割线——————————————————\n女友Sonja是不是斋藤科技公司的员工？ 我想用几点反驳之前有答友提出的阴谋论： 1.如果Sonja是斋藤公司的，那么她作为内部人员偷窥到新项目的几率要比一个app上招募而来的临时测试员有更大的几率，方法有上百种；她去勾搭新项目内部成员，都比押宝在一个零工人员的几率大。 2.如果Sonja是斋藤科技的人员，虽然可能不知道正在进行的新项目是什么，但是极大几率知道他们公司在使用的技术，知道这项技术在如果在手机信号干扰的情况下，极有可能出现意外情况，如果出现重大事件，这项技术可能会被叫停，但是Sonja很显然是非常希望事先窥探到新项目的情况，大赚一笔，死亡事件是她不太希望看到的； 3.有人说Cooper的信用卡被黑，是Sonja干的，但是所有证据表明，Sonja和这件事关系不大，首先，我们从设备等基本可以断定影片里的信用卡和我们的一样，是芯片卡，Cooper在打电话给信用卡公司的时候，信用卡公司提供了盗刷情报：昨晚在苏梅岛买过凉鞋。苏梅岛是在泰国南方，影片的一开始就提到Cooper曾经在泰国游玩，Sonja在英国要凉鞋干嘛，Cooper这个丢三落四的人在泰国游玩的时候信用卡被人复制后盗刷的可能性更大。（毕竟他在剧内一次差点忘记背包，一次把背包就留给rav看管）。而且即使是Sonja黑了他的账户，没有钱的Cooper找朋友和父母借钱的几率大，还是找一夜情对象借钱的几率大，他的手机联系录里有至少几十个人。信用卡在远在泰国的地方被盗刷，可能性有两种，一种是实地的提款和消费，就是有人复制了卡之后在泰国使用了信用卡；另一种是利用网络ip地址。Cooper是一个丢三落四、不是科技专业人员、没有任何突出优势的人，大费周章地编排布局是不是有点过于隆重了？ 4.有答友提出Sonja给Cooper挑选了这个公司之前，Cooperr对这个公司一无所知，有目的有预谋。首先，Sonja在raven酒吧里面说过她是科技记者，作为一个记者，关注行业内部超级受瞩目的公司和明星ceo没什么奇怪的。当然反过来，你看Cooper并不认识明星ceo和公司，就知道他其实很崇拜科技，但是没有科技背景，对科技的认知基本来源于玩过的游戏。 —————————————————此处应有分割线——————————————————\n为什么测试过程从5点38分开始持续了0.04秒，但是Cooper依然能有拍照的时间，并且墙上时钟显示是在5点39分做的？这是一个bug吗？ 首先，从已知的所有现实证据进入房间后阅读免责声明，然后katie出去拿签名页 5点35 p.m.katie拿着签名页回来的时间 5点35 p.m.运行开始事件：5点38 p.m.test duration（测试持续时间）：0.04smom来电时间 ：5点38 p.m.这点毫无疑问，就是戴上设备开启后的0.04s，Cooper崩溃了，死掉了\n电脑画面（进度条显示为15%）Cooper和设备的画面（进度六个格）也就是说进度15%和读取6个格之后的所有事情，都只存在于Cooper的意识中，而非现实\n那 5点39分 p.m. 拍照且发给Sonja是怎样实现的呢？ 首先来分析这个人的性格，Cooper是个怎样的人呢？邓布利多和格兰芬多是《哈利·波特》里的。 我们仅仅分析他在现实里的所有行为，就能发现他是个有点中二、有点自视为英雄的狂妄自大，还是个沉溺于虚幻故事和游戏，想象力非常丰富的人，他希望在Sonja面前展现有能力的样子。而且这种絮絮叨叨地说话方式证明他现在很紧张，这是一种补偿机制，也是一种掩饰。（毕竟一般的人如果受邀去参加这种测试，一般会把重点放在科技啊，参观啊，体验啊，很少有人很坚定地认为自己能已经足够重要到可以挖到别人家的机密资料） 当然在后来他的意识中，也有类似的场景：他在面对斋藤翔的时候，说这个神经网络软件包的名字太过时了；他在古堡里，开始喝酒和絮絮自语的时候，被Katie取笑说你是怕了吧，他说他才没有\u0026hellip;..等等\n所以从这个维度分析拍照这件事的话，我的看法是：Katie出去拿签名页时，他发现自己有机会拍照，于是在想象自己拍完照发给Sonja（简称yy）他特别强调了自己会乖乖在这一动不动地等着（注意此时时间是 5点35 p.m.）\n然后他想象自己像一个特工一样跳起来，迅速去拍了照片，甚至还有时间发出一下感叹，然后写一堆文字抱怨居然还要动手术，然后还能有时间等待Sonja回信，看到她惊讶的表情（注意此时时间是 5点39 p.m.）然而Katie的速去速回没有给Cooper时间（注意katie回来的时候，时间是 5点35分 p.m.）就是说Cooper的英雄主义，不，就是想炫耀一下自己得逞的场景纯粹存在自己的想象中，还没来得及实践，Katie的动作比他预想的要快很多，他连坐着、右手握着笔、翘二郎腿的姿势都没变过。很明显，Sonja没有收到照片，发出去的照片和短信是不存在的，那他拍照的动作也就是不存在的，所以这不是一个时间上的bug，我更倾向于说这是一个刻意安排的情节。\n而为什么要特意安排这个情节呢，其实和他后来为什么暴毙而亡是有关系的\n—————————————————此处应有分割线——————————————————\n为什么他的意识中有两层？他是因为什么而暴毙而亡的呢？ 从影片中我们可以看出他是在意识中看到了认不出自己儿子的母亲，Cooper大喊“mum”，并且在母亲打电话给他的时候。Cooper突然所有神经突触都被激活，然后鼻腔流血，抽搐，死掉了\u0026hellip;\u0026hellip;\n以上这是所有的已知事实。\n从上面这些证据来看，有两个原因让他突然死掉了：技术层面，应该是因为来电的传入信号干扰了上传数据流；情感层面，他可能是因为太过激烈的情感而导致全部神经突触同时被激活。 斋藤在面对这种情况用了“must”这种语气很强烈、很坚定的词，所以说一定是有信号干扰的元素在。但是在他说完这句话之后，Katie看了一下测试data运行数据说，他的全部神经突触同时被激活了，然后这时候斋藤的反应也很茫然，仔细询问了当时Cooper叫喊的内容，要求记录的运行崩溃原因不是直接写信号干扰，更像是不知道具体原因，无法分析和归类，所以只记录已知事实的内容。\ndebate一下斋藤公司阴谋论，认为斋藤翔和公司员工都对此有预谋的答友，其实应该是误解了：1、斋藤翔的肢体语言表明他确实慌了，面对公司技术导致人死亡，他一直在想可能存在的原因；2、Katie说她从来没有杀死过人的玩笑话，还有她在面对这情况极其内疚、慌张的情况来看，她应该对此毫无准备；3、公司的测试表格内容都是“test duration” “cause of crash”这一类针对技术和测试本身的名词，并不存在有答友认为对他的死亡连专有表格都存在的情况；4、前文katie提到这项技术“没有永久性损伤，比打耳洞的伤害都要小”指明了这个测试其实很简单、很安全；5、通篇都能看到Katie比起技术人员，更像是一个接待人员，就说明这个并不是一个技术性很强的工作，斋藤翔作为ceo只是因为有人死掉了，才惊动了他，他并没有亲自参与试验，就说明这真的本该是个很安全的、低技术含量的测试工作，死亡是非常意外的事件。\n如果说这是一个阴谋，我看不到任何符合逻辑支持的证据： 假设真的是有预谋的，斋藤公司先找sonja引诱他，然后黑了他的信用卡，确保他不会联系任何人，乖乖回到Sonja的身边——（这要全套的背景调查，性格行为分析、预测，并且保证Sonja作为美人计的重要组成部分足够有吸引力） 保证他能接触到斋藤公司的工作——（要黑了他的手机，并且调查他常用的零工app，然后发布信息在他常用的软件上） 那构成他死亡的原因是：1、激烈的情感（这需要非常亲近人员的调查，听取邻居、亲友的证言）；2、妈妈打来的电话（斋藤公司要和他妈妈商量好恰当的时间来电话，对Coope妈妈来说她是愿意帮助杀死自己儿子） 然后公司冒着新项目和技术被叫停还要做这种事的目的是什么呢？他看上Cooper什么特质，而非要是Cooper不可呢？ 这明显不符合逻辑啊。 阴谋论者可以看一下这位的回答如何评价《Black Mirror》（黑镜）第三季第二集《Playtest》（游戏测试）？ - 知乎用户的回答\n我比较好奇的是一件事： 这个科技（或者程序）对Cooper到底影响了多少？ Cooper从打地鼠开始就已经开始在意识中了，这种意识到底是他的凭空想象？还是在mushroom这项科技的引导和作用下建立起来的。\n0.04s意味着电脑上加载了15%，头盔上面加载了6个格，也就意味着没有完成，那这15%到底对他影响了多少，这个科技是说完全加载完后开始一系列的影响，就像是我们玩游戏，一定要更新100%才能打开游戏，还是说从加载1%开始，他就已经身在影响之中。如果是这样，科技对他的影响到什么程度，换句话说，他意识里的哪些内容是在科技的引导下的，哪些是完全脱离了掌控的？\n—————————————————此处应有分割线——————————————————\n我晚点更新关于他情感上为什么突然激动的原因，因为人的情感细腻，很繁琐\n首先我们来看他这一生最怕的东西是什么。 他在古堡的经历可以说是一个递进的过程，记忆的提取从他的短期记忆到长期记忆，物体从静态的到动态攻击，程度从恐惧的到恐怖的，来源从外部来的恐惧到自身内部的恐惧。\n恐惧的程度从对动物（蜘蛛）到对他人（高中恶霸乔西 彼得斯和Sonja）的恐惧，再到面对自身的恐惧。\n有几句让他临近崩溃的话：为什么意识有两层？《盗梦空间》里曾经提到一个很有意思的现象，就是你从来都不知道自己是怎样来到这个场景中的，似乎就是突然出现并且开始了一系列情节。而这个测试，Cooper是有意识地参与其中的，他知道自己在进入一个测试，所以在他的恐惧达到顶点的时候，用了一个退出游戏的指令，让自己心情平复，但是这让他更相信眼前的一切，认为母亲确实患了阿尔茨海默氏症，所以心情更加悲痛绝望。\n母亲一共三次来电： Cooper离开家的时候，很小心翼翼地关上门，结合后来的信息来看，他是不知道怎么面对母亲，在没有通知母亲的情况下偷偷溜走的；特意挑了凌晨6点、不惊扰母亲的情况下。 本应该在熟睡、不知情的母亲竟然打来了电话，时间显示6点16分后来他和Sonja在床上，母亲又打来一次电话这其中有一个2.5次，就是几分钟后他吃早饭，妈妈又打电话过来（因为这次的选项是“现在不方便接听电话”）\n第三次就是他在测试时他其实想要打给母亲过他只是和妈妈没那么亲密，不知道该怎么开启话题，不知道该怎么跟她说，所以他才离开，所以他才开始这场旅行。 他亲眼目睹他的父亲因为阿尔茨海默病（老年痴呆症，临床上以记忆障碍、失语、失用、失认、视空间技能损害、执行功能障碍以及人格和行为改变等全面性痴呆表现为特征）认不出最亲密的人，并且看过《实习医生格蕾》的都知道，这种病会遗传，有家族病史的发病几率高出很多。其实他害怕自己也会得病，所以他选择出门旅行，趁他还可以，多去制造回忆。所以他挑选的景点都是很经典或者很刺激的，用这样的方式来证明自己活着或者活过。他去了很多国家，有很多刺激的体验，但是其实感觉他并不是特别享受，只是为了拍照或者是证明自己来过，除了拍照，他的神色一般都是憔悴和落寞的。当Sonja问他环游世界特别酷，对吗？他的回答不是具体到在哪里完成了怎样激动、刺激、惊险的体验，而是用列举去过的国家的方式来表达他环游了世界\n他在面对父亲的自杀时没有崩溃，在面对自我的迷失中没有崩溃，他在什么时候崩溃了呢？在面对母亲认不出他的时候。并且母亲还一次一次试图给他打电话，他也曾经想要给母亲打电话过，但是因为种种原因没开口，其实他知道自己在逃避，他是个胆小又懦弱逃避的人，他知道他终归会回去面对的，他也漂泊得累了，只是他没有做好准备。现在母亲和他父亲一样了。愧疚感连带着他的悲观、后悔、绝望，一下子冲击了他，让他所有的神经突触都被激活了。\n无论是技术的引导下，还是说他本身就是很悲观，在他的意识中：女友Sonja是有目的接近他的，是会攻击和伤害他的；斋藤公司是想要害他的，借着Sonja的话语，说这个项目已经害死4-5人，Katie在接入点的问题上戏弄他，斋藤在看到他疯了的时候把他关了起来；他迷失了自己，不知道自己是谁（这有点像老年痴呆的症状之一），妈妈也身患这种疾病。他直面了这些恐惧，让他陷入到自怨自艾的氛围中，从他坐飞机时候的不同表现就可以看到。\n猝死更可能是所有悲观的叠加，母亲的得病对他来说是精神上压垮骆驼的最后一捆稻草。\n（中途穿插更新一小部分2016-11-2，我最近才闲下来去看其他人的答案，发现一个很意思的脑洞大开，如何评价《Black Mirror》（黑镜）第三季第二集《Playtest》（游戏测试）？ - 张林的回答这位答友说也许Cooper向女友说了谎，其实得阿尔茨海默病的一直都是母亲，父亲去世后，看护工作就留给Cooper了，但是他不想要一直守着母亲，哪也去不了，所以才逃离去看全世界。我推敲了一下，觉得也有道理，也许这就是他不愿意接母亲电话的真实原因呢？影片的片尾曲是猫王的《mama liked the roses》，其实call mom这个词，有“喊妈妈”的意思，也有“打给妈妈”的意思，黑镜最后出现这一幕，是不是有意在提示主题也不一定哦～《黑镜》永远是在用黑科技、向未来致敬的方法来显露人性） 貌似大多数人都把重点放在炫酷的科技上面，但是运用科技的永远是人。如果有心理学方面的答友从心理学来分析这一故事，肯定会很有意思，人决定了科技的运用方向和方法。\n","permalink":"https://zweisamkeiten.github.io/posts/playtest/","summary":"简单地说就是他是被自己给吓死的，别看他玩过蹦极、恐怖游戏，其实他是在用这种刺激的方式来掩盖另一种胆小，所以他号称自己是“追求刺激者”，但是实","title":"黑镜S3E2 Playtest"},{"content":"根据对导演 Charlie Brooker 的采访和英媒一些评论家的评论，影片的背景来源于英国一个真实的案件——moor murder（又译沼泽谋杀）。英国一对情侣Ian Brady 和Myra Hindley 在1963年前后，在英国先后杀害10-17岁五个无人看管的孩子，其中4个收到性侵犯。Myra Hindley 被英国媒体称为“英国最邪恶的女人”，虽然于2002年，60岁的Myra因病去世，但是她在监狱37年中仍然获得了英国公开大学的学位，并回归天主教徒身份，并且曾申请假释。公众认为英国的刑罚制度无法对Myra 得到充分的惩罚。\n确实是这样，1969年英国废除死刑制度，尽管西方各国在20世纪队死刑存废不断有激烈争论，从50年代起西方各国全部废除死刑制度。根据根据《欧洲人权公约》第6议定书第1条的规定：“死刑应予废除，任何人不应被判处死刑或被处死”，欧共体坚决主张所有成员国都必须废除死刑，并将这一条作为加入欧盟的先决条件。然而，20世纪三十年代后，随着美国经济低迷，犯罪率的爆炸式增长，西方的监狱制度和体系也出现了极大的问题。死刑的存废是否合理，我们暂不予讨论。但现如今乃至未来，罪犯如何得到充分合理的惩罚是我们值得探讨的问题。\n从浅层意义来讲，这部影片讲述了一种新式惩罚过程。女主角是一起犯罪案件的帮凶，她的帮凶，冷漠的行为导致了一个幼小生命的丧失。这件是的存在，无论是对于影片中的公众，还是现实中的公众都是愤怒的事情。而真正犯罪的凶手，女主角的未婚夫选择自杀，凶手无法得到法律的制裁，公众的愤怒无法平息。于是一种新的惩罚方式——白熊正义公园应运而生。白熊公园是一种新的方式，去制裁那些无法被法律制裁的凶手，维护所谓的人间“正义”，就像是DC漫画中超级英雄的出现，暗黑者中“darker”的存在，这些人就是维护着人间秩序，惩罚法律惩罚不到的人。然而这些是否是真正的正义，我们稍后后续段落中探讨。\n我们首先要谈论的是“白熊正义公园”这种新型惩罚手段。2013年伦敦大学皇家霍洛威学院的心理学研究员Rebecca Roache 提出用技术手段来对严重犯罪分子采取惩罚措施的设想。她提出随着技术的发展，人类的思维可以上传到计算机中。于是Rebecca 根据牛津大学的Nick Bostrom 教授称超级人工智能能在八小时之内实现上千年的思考这一假设，提出了上传罪犯的思维，让计算机上模拟惩罚他的大脑活动，让他们的精神上得到惩罚，以缩小监狱刑罚所带来的时间和空间成本。就像白熊公园，对女主角的精神折磨远远大于她坐牢的肉体折磨。让她感受到当她所犯罪行时，女孩的无助和恐惧。而周围录影的观众，就像她一样冷漠，他们也像她一样，是旁观者，也是帮凶。而游戏结束后的公众的职责与唾骂，也是她“应该承受”的屈辱。她一遍一遍地遭受着惩罚，这种刑罚就像佛教里最残酷的惩罚，就像坠入了一个无间地狱，不断地循环痛苦，得不到片刻停歇，直至永生。\n然而，对于白熊公园这种惩罚手段是否合理，白熊正义公园是否真正“正义”？我们要从惩罚的本质分析。福柯曾在《训诫与惩罚》描述过各个国家在过去的酷刑手段，对肉体的折磨和示众的效果。对肉体的惩罚，是一种报应性惩罚（retributive punishment），所谓以牙还牙，以眼还眼。让犯罪者感受到受害者的同样痛苦，来消解受害者以及家属的痛苦和公众的愤恨，从而以正视听。如果出于这个目的，白熊公园的存在就是合理的。\n女主角在失忆中醒来，她对周围事物的恐惧就与被绑架女童的恐惧相同。在她寻求帮助时，周围人的冷漠就如她作为帮凶时的冷漠一样。在她逃亡的过程中，暴力与伤害也是受害儿童所经受的。最后大幕拉开，人们对她的指责与唾骂，也是正常罪犯在公开处决时一样，但唯一与福柯所提出的肉体惩罚不同的是，女主角在整个过程中没有受到任何肉体折磨，所有的痛苦都来源于精神和心灵。\n但是，就像福柯所说，刑罚本身是一种减少犯罪的手段，无论刑罚程度如何，都旨在纠正和修补的目的。随着社会的发展，在刑罚中，有一种劝恶从善的技术代替了存粹的赎罪。现代处决消除了示众场面和痛苦的消除，就如意大利法学家贝尔利亚 所说：“刑罚的目的既不是要摧毁折磨一个感知者，也不是要消除业已犯下的罪行”。严酷的刑罚不能挽回所犯下罪行的后果，反之人的心灵就像液体一样，总是顺着它周围的事物，随着刑场变得日益残酷，这些心理也变得麻木不仁了。惩罚变成一种公共表演，使观众习惯于本来他们厌恶的暴行，刽子手在向他们展示惩治罪犯的同时也在施展犯罪。如果从改邪归正的角度出发，白熊公园的存在缺少合理性，第一女主角在整个“被惩罚”的过程中都没有犯罪的记忆。人的认识来源于基模的构建，换句话来说人的世界观来源于记忆，如果她没有“罪犯”时的记忆，就不算严格意义上的“罪犯”。这时白熊公园的行为起不到“审判”的作用，而是另一种程度的迫害。第二，女主人公每天被抹去记忆，承受着永无休止的惩罚。她的痛苦是无穷尽的，而真正正义的审判难道不是也需要一个期限么？\n白熊公园的审判过程是一种新型的“公开审判”（public crucifixion）。有人把这比作这次审判比作福柯的“公众景观”。观众的愤怒和高涨情绪的情绪，促使了白熊公园的诞生和操作。然而，我认为并不是这样的。白熊公园的管理者和创造者才是真正的幕后者。赫尔曼 在propaganda model 理论中强调的，一些精英者和少数人利用媒体宣传模式，渲染和操纵公众意见，以达到自己的“社会目的”和经济利益。影片的结尾，白熊公园暗讽的的管理者的民粹主义，难道也不正是利用民众的自以为是的正义，来获得自己公园商业运营的目的吗？\n白熊正义公园所展示给我们的世界，是一个反乌托邦式的正义世界。表面上的世界代表的是正义，对穷凶极恶的人的审判，实际上与恶龙搏斗的人自己早已经变成恶龙。\n转载自知乎https://www.zhihu.com/question/20788342， 会化的碎冰冰.\n","permalink":"https://zweisamkeiten.github.io/posts/white-bear/","summary":"根据对导演 Charlie Brooker 的采访和英媒一些评论家的评论，影片的背景来源于英国一个真实的案件——moor murder（又译沼泽谋杀）。英国一对情侣Ian Brady","title":"黑镜S2E1 White Bear"},{"content":"前言: 总想把树莓派闲置的资源给利用起来,给树莓派装上64位系统的起因也是因为原先的openwrt突然出故障,无处寻找原因就只能重新安装。也因此发现了manjaro arm64版本\ndocker安装 可看前面的文章\n拉取镜像与配置 1. 打开网卡混杂模式\nsudo ip link set eth0 promisc on 此处的eth0为有线网卡接口名\n2. 创建网络\n（需结合实际网络情况进行修改)\ndocker network create -d macvlan --subnet=192.168.1.0/24 --gateway=192.168.1.1 -o parent=eth0 macnet 这条命令需要根据树莓派的实际网络环境进行修改.可以通过ip addr show查看树莓派的ip地址来获得网段范围。 这里一个重要提醒 先对树莓派进行静态ip固定设置\n如树莓派ip为192.168.3.200，那么说明树莓派处在192.168.3.x网段。因此需要将上面的命令中的192.168.1.0与192.168.1.1修改为192.168.3.0和192.168.3.1\n此时可以通过docker network ls命令可以看到网络macnet已经建立成功\ndocker network ls NETWORK ID NAME DRIVER SCOPE 12debb06d4ff bridge bridge local 1d95814487a4 host host local 1bd279243d7b macnet macvlan local ea9faa7fb21c none null local 3. 拉取镜像\n由于使用的为arm64架构的系统，所以我们选取的镜像也需要符合\n这里推荐这个buddyfly/openwrt-aarch64 网页控制台的默认密码为password\ndocker pull buddyfly/openwrt-aarch64 镜像拉取加速的方法前面文章也有介绍\n如果为原来的树莓派官方系统这里可以使用阿里云仓库中的镜像\ndocker pull registry.cn-shanghai.aliyuncs.com/suling/openwrt:latest 拉取镜像完成后，可以通过执行docker images命令查看现存镜像\ndocker images 4. 开启openwrt容器\ndocker run --restart always --name openwrt -d --network macnet --privileged buddyfly/openwrt-aarch64:latest 对于后一个镜像的启动\ndocker run --restart always --name openwrt -d --network macnet --privileged registry.cn-shanghai.aliyuncs.com/suling/openwrt:latest /sbin/init 其中的/sbin/init为容器启动后执行的命令。\n其中:\n--restart always参数表示容器退出时始终重启，保证服务的稳定性\n--name openwrt 参数定义了容器名称为openwrt\n-d参数定义容器运行在Daemon模式\n--networt macnet参数定义将容器加入macnet网络\n--privileged参数定义容器运行在特权模式下\nbuddyfly/openwrt-aarch64:latest为docker镜像名\n启动容器后，可以使用docker ps -a查看当前正在运行的容器\n$ docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES a26cee7cade6 openwrt:latest \u0026#34;/sbin/init\u0026#34; 3 hours ago Up 3 hours openwrt 若容器运行信息STATUS列为UP状态，则说明容器运行正常。\n5. 进入容器修改相关参数\n根据实际网络情况进行修改\ndocker exec -it openwrt bash 其中: openwrt为容器名称;bash为进入容器后执行的命令\n进入openwrt命令行界面，编辑其网络配置文件 我们需要更改Lan口的配置\nnano /etc/config/network 该镜像没有自带vim编辑器,有些失望\nconfig interface \u0026#39;lan\u0026#39; option type \u0026#39;bridge\u0026#39; option ifname \u0026#39;eth0\u0026#39; option proto \u0026#39;static\u0026#39; option ipaddr \u0026#39;192.168.123.100\u0026#39; option netmask \u0026#39;255.255.255.0\u0026#39; option ip6assign \u0026#39;60\u0026#39; option gateway \u0026#39;192.168.123.1\u0026#39; option broadcast \u0026#39;192.168.123.255\u0026#39; option dns \u0026#39;192.168.123.1\u0026#39; 所有的 192.168.123.x 需要根据树莓派所处网段修改，option gateway和option dns填写路由器的 IP，若树莓派获得的 IP 为 192.168.3.200，路由器 IP 为192.168.3.1，则需要这样修改：\nconfig interface \u0026#39;lan\u0026#39; option type \u0026#39;bridge\u0026#39; option ifname \u0026#39;eth0\u0026#39; option proto \u0026#39;static\u0026#39; option ipaddr \u0026#39;192.168.3.254\u0026#39; option netmask \u0026#39;255.255.255.0\u0026#39; option ip6assign \u0026#39;60\u0026#39; option gateway \u0026#39;192.168.3.1\u0026#39; option broadcast \u0026#39;192.168.3.255\u0026#39; option dns \u0026#39;192.168.3.1\u0026#39; option ipaddr 项目定义了 OpenWrt 的 IP 地址，在完成网段设置后，IP最后一段可根据自己的爱好修改（前提是符合规则且不和现有已分配 IP 冲突）。\n6. 重启网络\n/etc/init.d/network restart 7. 进入网页控制台\n在浏览器中输入第五步中设置的option ipaddr的ip进入Luci控制面板\n若ip设置为192.168.3.254则在浏览器中输入http://192.168.3.254\n用户名为root 默认密码为password 建议登录后就在系统设置项里修改管理员密码\n** 8. 关闭DHCP服务 **\n在 “网络 - 接口 - Lan - 修改” 界面中，勾选下方的 “忽略此接口（不在此接口提供 DHCP 服务）”，并“保存\u0026amp;应用”。\n9. 主路由的DHCP设置\n进入路由器后台中，将主路由的 DHCP 的默认网关和 DNS 服务器设置为第 5 步中option ipaddr 项目中的 IP。 10. 重新连接路由器\n完成以上操作后，断开设备（如手机，电脑）与路由器的连接，重新连接路由器，连接路由器的设备将获取到我们设置到的 IP。\n其他问题修复 由于我的路由器无法更改dhcp的设置，因此我从第8步开始改用将openwrt设为旁关路由，用静态ip连接openwrt获取地址分配。\n从第八步开始,lan口设置中，关闭ipv6的各项设置,关闭动态dhcp,启用强制分配ip地址，即使查找到另一个服务器，也使用openwrt分配地址\n同时我又遇到了开启passwall后无法访问国内网站的问题\n解决方案为\n在防火墙中添加自定义规则\niptables -t nat -I POSTROUTING -j MASQUERADE 重启防火墙 这样之后还是不行,我又在网络lan口设置中将桥接模式取消\n问题解决\n手动指定网关\n如果路由器固件不支持自定义 DHCP 服务的网关及 DNS 地址（常见于路由器官方固件），或者只希望局域网下的个别设备接入旁路网关时，须在接入设备上做以下配置：\n安卓: 需要在安卓的 WIFI 设置内将 IP 获取方式更改为“静态”或“手动”，其中：\n“IP 地址”项目需要更改为网段内不冲突的地址；\n“网关”或“路由器”项目需要更改为旁路网关 IP 地址；\n“前缀长度”项目填写“24”；\n“DNS”项目需要更改为旁路网关 IP 地址（两个 DNS 输入框填写一个就可以）。\n完成并提交设置后，关闭 WIFI 开关再打开，连接设置的 WIFI 热点，若当前网络参数为设定值，则证明设置成功。\nwindows: 对于linux用户,我想这个问题不难解决\n","permalink":"https://zweisamkeiten.github.io/posts/arm64%E6%9E%B6%E6%9E%84openwrt-docker%E9%83%A8%E7%BD%B2/","summary":"前言: 总想把树莓派闲置的资源给利用起来,给树莓派装上64位系统的起因也是因为原先的openwrt突然出故障,无处寻找原因就只能重新安装。也因","title":"Arm64架构openwrt Docker部署"},{"content":"前言 Linux下的硬盘分区如果被识别到，就会被分配为一个块设备, 如/dev/sda. 同时为了区分每个分区，会分配给每个分区一个UUID 在使用calibre-web的时候，我想要将书籍单独放置在U盘里,因此开机自动挂载U盘的需求产生了\n一、Linux UUID的作用及其意义 1. 真正的唯一标识符 UUID为系统中存储设备提供的唯一标识字符串。也不管这个设备是什么分区类型。当对设备添加了新的存储设备时,可能会使原先分配的块设备名被改变,而导致系统启动时找不到设备而失败,因此使用UUID可以避免这一麻烦。 2.设备名称并不总是不变的 自动分配的存储设备名称并非总是一致的，它们依赖于启动时内核加载模块的顺序。例如在上一次启动时插入了U盘，而下次启动时又将U盘拔掉，就可能会导致设备名称分配不一致。\n二、Linux UUID的获取方法 1. ls -l /dev/disk/by-uuid/\ntotal 0 lrwxrwxrwx 1 root root 10 May 7 18:08 00bc0f1e-27a0-485a-acd6-af259133f6de -\u0026gt; ../../sda9 lrwxrwxrwx 1 root root 10 May 7 18:08 03da0d2b-fc6a-4fc1-9286-37172a93579a -\u0026gt; ../../sda6 lrwxrwxrwx 1 root root 10 May 7 18:08 1d7aaf68-93f7-40c7-b7b3-63815dafb8ca -\u0026gt; ../../sda4 lrwxrwxrwx 1 root root 10 May 7 18:08 2A21-FC67 -\u0026gt; ../../sda1 lrwxrwxrwx 1 root root 10 May 7 18:08 6c904ce8-5282-42d9-836d-8cee31b1de27 -\u0026gt; ../../sda7 lrwxrwxrwx 1 root root 10 May 7 18:08 8e216c06-1112-4182-b0ac-c408729b9dad -\u0026gt; ../../sda5 lrwxrwxrwx 1 root root 10 May 7 18:08 C2F4-7E4C -\u0026gt; ../../sda8 lrwxrwxrwx 1 root root 11 May 7 18:08 CC76-4B3D -\u0026gt; ../../sda10 lrwxrwxrwx 1 root root 10 May 7 18:08 FA92210F9220D245 -\u0026gt; ../../sda3 这种方法适用于当不知道块设备名称时，信息有些杂乱难以一下子找到自己想要的设备\n2. blkid\n# arch @ hf in ~ [18:33:42] $ sudo blkid [sudo] password for arch: /dev/sda1: UUID=\u0026#34;2A21-FC67\u0026#34; BLOCK_SIZE=\u0026#34;512\u0026#34; TYPE=\u0026#34;vfat\u0026#34; PARTLABEL=\u0026#34;EFI system partition\u0026#34; PARTUUID=\u0026#34;0985f7b4-1b4a-4a2c-af6a-48cbe377794c\u0026#34; /dev/sda2: PARTLABEL=\u0026#34;Microsoft reserved partition\u0026#34; PARTUUID=\u0026#34;75f28ee8-7fec-4606-aef8-14e22520601b\u0026#34; /dev/sda3: BLOCK_SIZE=\u0026#34;512\u0026#34; UUID=\u0026#34;FA92210F9220D245\u0026#34; TYPE=\u0026#34;ntfs\u0026#34; PARTLABEL=\u0026#34;Basic data partition\u0026#34; PARTUUID=\u0026#34;102d3440-a960-446b-8cd5-589dbbb67a50\u0026#34; /dev/sda4: UUID=\u0026#34;1d7aaf68-93f7-40c7-b7b3-63815dafb8ca\u0026#34; BLOCK_SIZE=\u0026#34;4096\u0026#34; TYPE=\u0026#34;apfs\u0026#34; PARTLABEL=\u0026#34;Basic data partition\u0026#34; PARTUUID=\u0026#34;c1117a95-30e9-4c4d-bee2-bc2fb5c1a43e\u0026#34; /dev/sda5: UUID=\u0026#34;8e216c06-1112-4182-b0ac-c408729b9dad\u0026#34; BLOCK_SIZE=\u0026#34;4096\u0026#34; TYPE=\u0026#34;ext4\u0026#34; PARTUUID=\u0026#34;04342343-a071-5c41-9b63-4506eaa07c4f\u0026#34; /dev/sda6: UUID=\u0026#34;03da0d2b-fc6a-4fc1-9286-37172a93579a\u0026#34; TYPE=\u0026#34;swap\u0026#34; PARTUUID=\u0026#34;3c6149e9-9680-844d-8495-049ad52bf764\u0026#34; /dev/sda7: UUID=\u0026#34;6c904ce8-5282-42d9-836d-8cee31b1de27\u0026#34; BLOCK_SIZE=\u0026#34;4096\u0026#34; TYPE=\u0026#34;ext4\u0026#34; PARTUUID=\u0026#34;eac04f71-243b-2c4e-84aa-6db028be27cc\u0026#34; /dev/sda8: UUID=\u0026#34;C2F4-7E4C\u0026#34; BLOCK_SIZE=\u0026#34;512\u0026#34; TYPE=\u0026#34;vfat\u0026#34; PARTUUID=\u0026#34;214b9e68-69de-4a42-bd4f-be7dd18c93dc\u0026#34; /dev/sda9: UUID=\u0026#34;00bc0f1e-27a0-485a-acd6-af259133f6de\u0026#34; BLOCK_SIZE=\u0026#34;4096\u0026#34; TYPE=\u0026#34;ext4\u0026#34; PARTLABEL=\u0026#34;Basic data partition\u0026#34; PARTUUID=\u0026#34;823ca85a-7b64-4a04-800d-258ecb21c31c\u0026#34; /dev/sda10: LABEL=\u0026#34;M-dM-:M-$M-fM-^MM-\\\u0026#34;M-eM-^HM-^FM-eM-^LM-:\u0026#34; UUID=\u0026#34;CC76-4B3D\u0026#34; BLOCK_SIZE=\u0026#34;512\u0026#34; TYPE=\u0026#34;exfat\u0026#34; PARTLABEL=\u0026#34;Basic data partition\u0026#34; PARTUUID=\u0026#34;29dca548-39e4-49b3-b498-936e53bf4a65\u0026#34; 展示了块设备的类型，可能对我们有帮助\n也可以对指定的块设备进行查询\nsudo blkid /dev/sda1 三、自动挂载的问题 当我们需要自动挂载硬盘时,需要注意几个前提事项\n首先需要确认内核是否支持NTFS,exfat文件系统，当然如果文件系统是Linux原生支持的，那么就无需担心了。\n Linux内核目前只支持对微软NTFS文件系统的读取。 NTFS-3G 是微软 NTFS 文件系统的一个开源实现，同时支持读和写。NTFS-3G 开发者使用 FUSE 文件系统来辅助开发，同时对可移植性有益。\n 引自`Arch wiki`  如果需要读写NTFS，我们需要额外的软件进行支持,因为默认只支持读，而无法写入 安装ntfs-3g,ntfs-config\n相较而言,可能exfat文件系统更为合适 安装exfat-utils\n自动挂载 修改/etc/fstab文件\nvim /etc/fstab ------------------------------------------------- # \u0026lt;file system\u0026gt; \u0026lt;dir\u0026gt; \u0026lt;type\u0026gt; \u0026lt;options\u0026gt; \u0026lt;dump\u0026gt; \u0026lt;pass\u0026gt; 例如 UUID=CC76-4B3D /mnt/swap exfat defaults 0 0 /etc/fstab 文件包含了如下字段，通过空格或 Tab 分隔：\n\u0026lt;file system\u0026gt; \u0026lt;dir\u0026gt; \u0026lt;type\u0026gt; \u0026lt;options\u0026gt; \u0026lt;dump\u0026gt; \u0026lt;pass\u0026gt;   要挂载的分区或存储设备.  的挂载位置。  要挂载设备或是分区的文件系统类型，支持许多种不同的文件系统：ext2, ext3, ext4, reiserfs, xfs, jfs, smbfs, iso9660, vfat, ntfs, swap 及 auto。 设置成auto类型，mount 命令会猜测使用的文件系统类型，对 CDROM 和 DVD 等移动设备是非常有用的。  - 挂载时使用的参数，注意有些 参数是特定文件系统才有的。一些比较常用的参数有 (mount(8))： auto - 在启动时或键入了 mount -a 命令时自动挂载。  noauto - 只在你的命令下被挂载。\nexec - 允许执行此分区的二进制文件。\nnoexec - 不允许执行此文件系统上的二进制文件。\nro - 以只读模式挂载文件系统。\nrw - 以读写模式挂载文件系统。\nuser - 允许任意用户挂载此文件系统，若无显示定义，隐含启用 noexec, nosuid, nodev 参数。\nusers - 允许所有 users 组中的用户挂载文件系统.\nnouser - 只能被 root 挂载。\nowner - 允许设备所有者挂载.\nsync - I/O 同步进行。\nasync - I/O 异步进行。\ndev - 解析文件系统上的块特殊设备。\nnodev - 不解析文件系统上的块特殊设备。\nsuid - 允许 suid 操作和设定 sgid 位。这一参数通常用于一些特殊任务，使一般用户运行程序时临时提升权限。\nnosuid - 禁止 suid 操作和设定 sgid 位。\nnoatime - 不更新文件系统上 inode 访问记录，可以提升性能(参见 atime 参数)。\nnodiratime - 不更新文件系统上的目录 inode 访问记录，可以提升性能(参见 atime 参数)。\nrelatime - 实时更新 inode access 记录。只有在记录中的访问时间早于当前访问才会被更新。（与 noatime 相似，但不会打断如 mutt 或其它程序探测文件在上次访问后是否被修改的进程。），可以提升性能(参见 atime 参数)。\nflush - vfat 的选项，更频繁的刷新数据，复制对话框或进度条在全部数据都写入后才消失。\ndefaults - 使用文件系统的默认挂载参数，例如 ext4 的默认参数为:rw, suid, dev, exec, auto, nouser, async.\n dump 工具通过它决定何时作备份. dump 会检查其内容，并用数字来决定是否对这个文件系统进行备份。 允许的数字是 0 和 1 。0 表示忽略， 1 则进行备份。大部分的用户是没有安装 dump 的 ，对他们而言 应设为 0。 fsck 读取 的数值来决定需要检查的文件系统的检查顺序。允许的数字是0, 1, 和2。 根目录应当获得最高的优先权 1, 其它所有需要被检查的设备设置为 2. 0 表示设备不会被 fsck 所检查。  ","permalink":"https://zweisamkeiten.github.io/posts/linux%E7%A1%AC%E7%9B%98%E8%87%AA%E5%8A%A8%E6%8C%82%E8%BD%BD/","summary":"前言 Linux下的硬盘分区如果被识别到，就会被分配为一个块设备, 如/dev/sda. 同时为了区分每个分区，会分配给每个分区一个UUID 在使用","title":"Linux硬盘自动挂载"},{"content":" “爱之于我，不是肌肤之亲，不是一蔬一饭，它是一种不死的欲望，是疲惫生活中的英雄梦想。”\n  有些东西，生活自会让幼稚的我们明白。只是需要一点点时间罢了。\n 不知道有多少人是把《甜蜜蜜》当作爱情片来看的。第一次看这部电影还是小学，家里刚买VCD机的时候。那个年纪当然不懂爱情，也很快淡忘了这部片子。只依稀记得李翘坐在黎小军的单车后座晃着腿哼着歌的画面。后来，是高中的时候，握着遥控器换台，看到有电视台在放这部片子，放映中插了很多广告，还是一直看下去了。经年之后，李翘和黎小军在纽约街头重逢，音乐响起，字幕亮起，我一个人怔怔地坐在沙发上。后来想起这部片子，下载了，一个人坐在电脑前看完，心里又是一阵空白。这部影片远远不是爱情片那么浅薄的。\n我以为自己是承受不起那样的重逢的。是电视里播放邓丽君去世新闻的时候。一个停住了脚步，另一个似乎是走过去了，又退回来。两个人站在那里把新闻听完，然后，抬头，望见了彼此。有一秒的迟疑，然后也只是淡淡的笑笑。李翘的笑是迷人的，一如从前。而黎小军也仍是数十年前的傻和憨。\n想起张爱玲的短文《爱》来：于时光的茫茫荒野里，逾千万人之中，没有早一步，也没有晚一步，遇见了那个人，那也没有别的话可说，唯有轻轻地问一声，“哦，你也在这里吗？”\n那么，岁月沉浮，沧桑变迁，隔着漫漫时光的两个人，经历了无数的聚首和离散，相遇和错失，是不是也只能相视微微笑？ 然后，要不要轻轻地问一问：“这些年，你过得还好吗？” 还好吗？还好吗？\n那些错失，两人或许倒是茫然。而我在局外，清楚地听见命运车轮的巨大轰鸣，看见其压过的深刻轨迹。\n那一年，内地到香港的火车上，隔着一张军绿色硬座椅背，他们曾经头靠着头，昏昏沉睡。列车抵达香港，他向左，她向右。那是他们不自知的初遇。\n后来，各自开始在这座繁华都市的全新生活。李翘迅速地融入，人脉颇广，做几份工，努力赚钱。黎小军学起了粤语，心里一直牵挂着留在内地的女朋友小婷。\n在麦当劳餐厅里，黎小军还说不清楚粤语，李翘站在柜台后，看着等在黎小军身后的长队，无奈，只得换了国语。黎小军却因此倍感亲切。其时，金钱是李翘最大的人生目标，唯一的乐趣是看银行卡里数字的变动。对这个傻傻愣愣的内地小子，她自然是不太上心的，但也乐得偶尔找他帮帮小忙。而黎小军每一次却都是用心。性格使然，更因为在香港这座不属于自己的城市的深深孤独感吧。\n你会爱上我，我会爱上你，都是因为寂寞。这是李宗盛的歌词。李翘和黎小军之间，也是这样吧。见面越来越频繁，开始有牵念。黎小军写给女友小婷的信越来越短，越来越敷衍，越来越少。可是，却又都不能也不敢面对这份感情。\n这不是阳光下的年轻的简单的爱情。里面掺杂了两个成年人的寂寞，陪伴，依赖和欲望。而李翘更是清醒地知道，她和黎小军不是一类人。他们之间发生的故事只可能存在于这个特殊的时间特殊的地点。\n黎小军本质上不是一个有太大志向的人，甚至，来香港的选择可能也盲目，最终的目的也不过是接小婷来一起生活。如果没有遇到李翘，他的人生势必将那样书写。而李翘不同，这一步是她的主动选择，并且一定要成功。\n闷热的酷暑空气里，炒股的人们在街头坐着，李翘和黎小军也在其中。不远处，有一对夫妻在为钱争吵。李翘说，黎小军，你看到了吗，我不要那样的生活。\n两个人的生活短暂交集，然后，一个向左，一个向右。\n李翘跟了在洗浴城遇见的黑社会老大，豹哥。黎小军接了小婷来香港，结了婚。\n李翘坐在车里，看着黎小军渐渐远去。车里邓丽君那一把甜嗓子，唱着别离。再见了，我的爱人。\n有泪静静淌下，凉凉的，咸咸的。\n如果故事就此结束，那么也不过让人在偶尔回想时，感慨一下吧。只是后来。黎小军与小婷离了婚，李翘也决定离开豹哥。这是两个人最接近爱情的时刻。天空也适时地下起了雨。只是雨下得太大。黎小军撑着黑色的长柄伞，立在岸边。李翘上船之前，转过身来，轻轻地说，等我，我很快就回来。\n她没有回去。在船上见到逃亡的豹哥。准备好的话还没有说出口，就哭了起来。她到底算得上是个有情义的女人。豹哥给过她一段好日子，虽然提心吊胆，物质上到底是富足的。现在，她跟着豹哥艰难逃亡。这是不是爱情？或许是，或许不是。即使最初更多是感激，后来那么久的相依为命，或许比所谓爱情更深刻。\n他们到了美国，打算慢慢安顿下来。豹哥甚至说，我们生个孩子吧。李翘去洗衣房取衣服。豹哥等在外面，在墙脚坐下，燃起一支烟。只是那么几分钟，或者更短，关于平静生活的幻想破灭。\n从洗衣房出来，李翘四下里找寻豹哥，漫不经心地挤进围观的人群。那样的漫不经心是残忍的。命运如刀，而我们毫不知情。李翘看到倒在血泊中的豹哥。昔日的江湖老大死于街头小混混的枪口。\n在医院里，对着豹哥的尸体，李翘平静地说，把他翻过来。医生把豹哥的身体翻转过来，露出背上的米老鼠纹身。那还是在洗浴城的时候，豹哥为哄李翘开心，在背上纹了米老鼠图案。对着微笑的米老鼠，和这个不再回来哄她开心的人，她终于不可抑制地哭出声来。\n在被移民局遣返的路上，李翘看到人群里黎小军骑着单车的身影，一如从前。正是堵车。她拉开车门，追赶黎小军的背影。却终于看不见他。\n她留在了美国。凭着当年在香港的那股韧劲，顽强地活下来，并且越活越好。差不多同时期来美国的黎小军也已成为中餐馆的大厨。这个时候大陆经济起飞。不少当年闯香港的人开始回内地发展。\n他们在同一座城市生活，听同一个人唱歌，走过同一条街道，看着同样的风景。命运一次次将他们捉弄，他们错身而过却毫无知觉，只是形单影只地继续着孤独的日子。\n直到满城同时响起邓丽君的歌声，直到唱歌的人已不再。\n两个饱经世事的中年人将怎样续写从前，故事将会走向哪里，又有谁能预测呢？\n有华人的地方，就有邓丽君的歌声。在这部影片中，邓丽君的歌是一个重要的线索。在香港的时候，李翘贩卖邓丽君的海报碟片，亏了本，为还高利贷而去洗浴城做按摩女，而遇见豹哥，有了后来的故事。李翘的经济头脑没有错，香港有许多的内地人，他们都喜欢邓丽君。但是她却忽略了傻傻的黎小军看到的另一个事实：告诉别人你喜欢邓丽君就等于表明自己内地人身份。这显然是所有在香港的内地人极力掩饰的。\n《甜蜜蜜》里有爱情，却更有比爱情更深刻的东西。它不仅仅是两个人的故事。说它是一代闯荡香港，美国的华人的生活缩影也是不夸张的。片中那些小人物活得卑微，却也自有光彩。\n黎小军的姑姑常说的是她年轻时候的事，说起影星威廉曾带她去浅水湾吃饭。说的人一脸眷恋，听的人只当她是一个疯子。可是，也许，那真的是一段事实呢？\n一向放浪的美国人，在情人查出患艾滋病后，却陪伴她回了马来西亚。\n这部片子里面没有伟大的人物，也没有伟大的情感。不过是些自私的男人和女人，不过是些儿女情长。唯其如此，反倒显得真实，真诚，有沉甸甸的分量，那分量来自生活本身。\n我常常想，要怎样才能承受得起生活中的那么多意外，情人离别，亲人生死。也许只因自己经得太少，阅历太浅，等真遇见了，不得不承担了，也就释然了坦然了淡然了，能够笑看云卷云舒，花开花落？\n就好像李翘与黎小军，一个坚定，一个怯懦；一个拽着生活前进，一个被生活推着前行，最终不过殊途同归。\n有些东西，生活自会让幼稚的我们明白。只是需要一点点时间。\n看这样一部片子，是会使人恍惚怅然的。可是，又觉得这样一个瞬间的空白是好的。\n转自豆瓣https://movie.douban.com/review/1297716/#comments\n 看的时候心里像是被蒙了起来，闷闷的。最令人触动的片段，永远是重逢与忘情拥吻的镜头。\n虽没有陌生城市独自打拼的经历，可也多希望有另一颗心来相依偎，自己的孤独与寂寞也被镜头情节所引出。人对爱的情感释放最为纯粹的爱情，男人与女人最为完美的结合，心与心的贴近，精神心灵上的支撑。一个人的脆弱，给自己的心灵带来伤害。两个人的结合却能够将脆弱在一个放松纯粹的空间里修补消化。在我的心里，我坚定不移的将爱放到了这样一个地位。每每怀疑它是错的，可还是期待，还是希望。\n在这部电影里，女人是脆弱的，也是强大的。李翘与黎小军的相遇中，李翘占据了主导。‘我害怕我不被你骗，你就不会来找我了’。李翘占黎小军便宜，一个又愿挨，一段爱情就这样慢慢萌芽。伴随这这段爱情生长的，是他俩的奋斗。这段奋斗即促进也阻碍了他两的爱。工作转好，股票失败，被迫做按摩，托身豹哥。来时单纯的理想慢慢掺杂了越来越多的复杂。李翘这的一波三折，相较黎小军那边的顺利，将本来慢慢拉近的他们忽地分开好远。这段爱情中的矛盾被拉上台面，理性与感情的交叉，现实、时间带来的压迫。这世上真的有纯粹的爱吗？\n李翘作为女人的柔弱，期待安全感的心从那个雨夜的缠绵开始。不知道怎么描述，心里真的感觉十分复杂。\n电影对爱情给了很高的评价，缘分的相遇与重逢，使这对恋人的命运不断的交叉。\n电影引起了我内心复杂的情感，世上真的有真正那样纯粹的爱情吗，两颗孤独心灵的依偎，在这两人营造的私密空间中相互舔舐伤口，消融了个体的脆弱，给人强大的心灵力量。周国平说，即使两人相爱，他们的灵魂也无法同行。世间最动人的爱仅是一颗独行的灵魂与另一颗独行的灵魂之间的最深切的呼唤和应答。史铁生对爱情的评价也是由孤独而始。\n电影中恋人相互依偎与拥吻的镜头，给了我最大的心灵冲击。高中阶段忽然繁重的学业加之环境与成绩的不理想，不平衡的心理状态，使我常常陷入对自己心灵的探索，什么样的东西有意义成为了我最在乎的东西.阅读了一些书籍后，更是将自己的思绪困在了一个走不出的困境中，甚至将追求纯粹的爱情作为自己的信条，到了现在这样的观念依然在心中根深蒂固。相信爱情，可我也知道两个契合的心灵哪那么容易找到，接受现实，却也忘不了理想。高中一段自导自演的暗恋，最后随着演完自己认为的最后一幕后，发现现实哪有这么理想。递给了她记录了心情的日记本，直到大家各奔东西，也没有得到‘心灵’的回复，只有直接的拒绝。我明白自己不够勇敢，我认清现实或许只是我想要寻求认同感的需求而错将‘爱’作为了治愈一切的药，从最初就作出了一个错误的决定。我们几乎没说过话，我只是在与幻想的你对话。直到最后一篇日记，我依然兴奋地用王小波的情书开头，‘你好哇’，可当我落下最后一个字的时候，你的回复就到了，我对你说，‘我知道了，你的部分已经完成了，我也要去完成属于我的那最后一部分了’。思考良久之后，在‘你好哇’下面写下了’再见’。彻夜的难眠是理想与现实的矛盾的彻底爆发，每一篇日记中我都重复地记录着当前的现实与我的想法的冲突。‘我知道，我都知道啊，但是……’。总有这样一个’但是’，这一个个但是使内心的空虚感不断的加深，这种不平衡的付出也许是使我越陷越深的原因吧。\n","permalink":"https://zweisamkeiten.github.io/posts/%E8%AE%B0%E7%94%9C%E8%9C%9C%E8%9C%9C/","summary":"“爱之于我，不是肌肤之亲，不是一蔬一饭，它是一种不死的欲望，是疲惫生活中的英雄梦想。” 有些东西，生活自会让幼稚的我们明白。只是需要一点点时间","title":"记甜蜜蜜"},{"content":"前言 最近看到黑客扫描网段获取ip之后暴力破解密码造成信息和经济损失的事,就想到自己的树莓派和服务器也是直接暴露在外网,平时输错密码也是常有的事情,也没对密码进行什么限制.这样想想也是有些后怕,害怕密码被通过穷举破解的方法破解.于是去查询了一些关于SSH的安全设置.\n更改SSH默认端口 大多数恶意扫描都是对默认端口进行扫描 改变默认端口能减少很大的风险\nvim /etc/ssh/sshd_config ----------------------------------- Port 22 # 改为其他端口 关闭ssh密码登录 vim /etc/ssh/sshd_config ----------------------------------- #PasswordAuthentication yes #取消密码认证的注释 将yes改为no 启用RSA公钥验证 vim /etc/ssh/sshd_config ---------------------------------- #PubkeyAuthentication yes #取消注释 #centos 服务器的ssh设置中可能还有 #RSAAuthentication yes #取消注释 AuthorizedKeysFile .ssh/authorized_keys #路径改为生成的连接主机的公钥 禁用空密码账户登录 # 禁止空密码账户登入（默认禁止） PermitEmptyPasswords no 完成更改 更改完成后\nsystemctl restart sshd.service #重启ssh服务 如果你的服务器有进行防火墙的配置\nufw allow 更改端口/tcp #或者\nfirewall-cmd --zone=public --add-port=端口/tcp --permanent firewall-cmd --complete-reload #重新载入防火墙配置 另提一句，如果像是阿里云的服务器，还需要在它的安全组中添加开放的端口\n客户端配置 更换了SSH的默认端口后,连接SSH时加上端口参数即可:\nssh -p 端口 example.com 也可以编辑~/.ssh/config文件,在其中加上Port参数,这样在连接SSH时,可以继续使用更换端口前的命令.\n~/.ssh/config -------------------- Host example.com Port 端口 优点 配置简单,修改单行配置并重启服务即可 有效减少各种针对SSH的扫描 缺点 使连接 SSH 变得略微麻烦； 有些时候，我们需要保持 SSH 监听在 22 端口上，那么这种方法就不适用了。xxxxxxxxxx deploy: type: git repo: server: ssh://username@ip:port/path/to/remote/gityml\n","permalink":"https://zweisamkeiten.github.io/posts/%E5%85%B3%E4%BA%8Essh%E7%9A%84%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE/","summary":"前言 最近看到黑客扫描网段获取ip之后暴力破解密码造成信息和经济损失的事,就想到自己的树莓派和服务器也是直接暴露在外网,平时输错密码也是常有的","title":"关于SSH的安全配置"},{"content":"docker安装  官方脚本安装  在测试或开发环境中 Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，Raspbian 系统上可以使用这套脚本安装，另外可以通过 –mirror 选项使用国内源进行安装：\n$ curl -fsSL get.docker.com -o get-docker.sh $ sudo sh get-docker.sh --mirror Aliyun # $ sudo sh get-docker.sh --mirror AzureChinaCloud 这是最为方便的方法\n执行这个命令后，脚本就会自动的将一切准备工作做好，并且把 Docker CE 的稳定(stable)版本安装在系统中。\n apt安装  由于 apt 源使用 HTTPS 以确保软件下载过程中不被篡改。因此，我们首先需要添加使用 HTTPS 传输的软件包以及 CA 证书。\n$ sudo apt-get update $ sudo apt-get install \\  apt-transport-https \\  ca-certificates \\  curl \\  gnupg2 \\  lsb-release \\  software-properties-common 鉴于国内网络问题，强烈建议使用国内源，官方源请在注释中查看。\n为了确认所下载软件包的合法性，需要添加软件源的 GPG 密钥。\n$ curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/raspbian/gpg | sudo apt-key add - # 官方源 # $ curl -fsSL https://download.docker.com/linux/raspbian/gpg | sudo apt-key add - 然后，我们需要向 source.list 中添加 Docker CE 软件源：\n$ sudo add-apt-repository \\  \u0026#34;deb [arch=armhf] https://mirrors.ustc.edu.cn/docker-ce/linux/raspbian \\ $(lsb_release -cs)\\ stable\u0026#34; # 官方源 # $ sudo add-apt-repository \\ # \u0026#34;deb [arch=armhf] https://download.docker.com/linux/raspbian \\ # $(lsb_release -cs) \\ # stable\u0026#34;  以上命令会添加稳定版本的 Docker CE APT 源，如果需要测试或每日构建版本的 Docker CE 请将 stable 改为 test 或者 nightly。\n 安装 Docker CE\n更新 apt 软件包缓存，并安装 docker-ce。\n$ sudo apt-get update $ sudo apt-get install docker-ce 建立docker用户组 默认情况下，docker 命令会使用 Unix socket 与 Docker 引擎通讯。而只有 root 用户和 docker 组的用户才可以访问 Docker 引擎的 Unix socket。出于安全考虑，一般 Linux 系统上不会直接使用 root 用户。因此，更好地做法是将需要使用 docker 的用户加入 docker 用户组。\n建立docker组\n$ sudo groupadd docker 将当前用户加入docker组\n$ sudo usermod -a -G docker $USER 退出当前终端并重新登录,进行如下测试\n测试Docker是否安装正确 $ docker run arm32v7/hello-world Unable to find image \u0026#39;hello-world:latest\u0026#39; locally latest: Pulling from library/hello-world d1725b59e92d: Pull complete Digest: sha256:0add3ace90ecb4adbf7777e9aacf18357296e799f81cabc9fde470971e499788 Status: Downloaded newer image for hello-world:latest Hello from Docker! This message shows that your installation appears to be working correctly. To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the \u0026#34;hello-world\u0026#34; image from the Docker Hub. (amd64) 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal. To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bash Share images, automate workflows, and more with a free Docker ID: https://hub.docker.com/ For more examples and ideas, visit: https://docs.docker.com/get-started/ 若能正常输出以上信息，则说明安装成功。\n注意： ARM 平台不能使用 x86 镜像，查看 Raspbian 可使用镜像请访问 arm32v7\n镜像加速 如果在使用过程中发现拉取 Docker 镜像十分缓慢，可以配置 Docker 国内镜像加速。\n镜像加速器 国内从 Docker Hub 拉取镜像有时会遇到困难，此时可以配置镜像加速器。国内很多云服务商都提供了国内加速器服务，例如：\n网易加速器https://www.163yun.com/help/documents/56918246390157312\n阿里云(需登录账号获取)\n 由于镜像服务可能出现宕机，建议同时配置多个镜像。各个镜像站测试结果请到 docker-practice/docker-registry-cn-mirror-test 查看。\n国内各大云服务商均提供了 Docker 镜像加速服务，建议根据运行 Docker 的云平台选择对应的镜像加速服务，具体请参考官方文档。\n 网易云 对于使用 systemd 的系统，请在 /etc/docker/daemon.json 中写入如下内容（如果文件不存在请新建该文件）\n{ \u0026#34;registry-mirrors\u0026#34;: [ \u0026#34;https://hub-mirror.c.163.com\u0026#34; ] }  注意，一定要保证该文件符合 json 规范，否则 Docker 将不能启动。\n 阿里云 注册后进入控制台 镜像中心 -\u0026gt; 镜像加速器\n它分配了一个加速器地址 另附操作文档\nsudo mkdir -p /etc/docker sudo tee /etc/docker/daemon.json \u0026lt;\u0026lt;-\u0026#39;EOF\u0026#39; { \u0026#34;registry-mirrors\u0026#34;: [\u0026#34;加速器地址\u0026#34;] } EOF 之后重新启动服务。\n$ sudo systemctl daemon-reload $ sudo systemctl restart docker 检查加速器是否生效 执行docker info | grep Mirrors\n如果从结果中看到了如下内容，说明配置成功。\nRegistry Mirrors: https://hub-mirror.c.163.com/ 可以登录 阿里云 容器镜像服务 镜像中心 -\u0026gt; 镜像搜索 查找。 一般情况下有如下对应关系：\n# $ docker pull k8s.gcr.io/xxx $ docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/xxx 常用配置和工具命令 #查看 Docker 版本 docker -v sudo docker pull 仓库/镜像:版本（留空的话默认为 latest） sudo docker run 加参数，用来创建容器 #查看运行容器 sudo docker ps #查看所有下载的镜像 sudo docker images #进入容器终端 sudo docker exec -i -t ha /bin/bash #实时查看10行的 ha 日志 sudo docker logs -f -t --tail 10 ha #重启 systemctl 守护进程 sudo systemctl daemon-reload #设置 Docker 开机启动 sudo systemctl enable docker #开启 Docker 服务 sudo systemctl start docker #下载 Docker 图形化界面 portainer sudo docker pull portainer/portainer #创建 portainer 容器 sudo docker volume create portainer_data #运行 portainer sudo docker run -d -p 9000:9000 --name portainer --restart always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer  ","permalink":"https://zweisamkeiten.github.io/posts/%E6%A0%91%E8%8E%93%E6%B4%BEdocker%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/","summary":"docker安装 官方脚本安装 在测试或开发环境中 Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，Raspbian 系统上可以使用这套脚本安装，","title":"树莓派docker环境部署"},{"content":"前言 之前接触过calibre-web这个项目,确实是一个非常好的管理书籍的项目,同时又不是calibre原软件一成不变的界面风格.最近接触到calibre-web有docker的版本,于是想试试将它部署到服务器上\n先是在阿里云试了试水,可是奈何1m的下载小水管,加载书籍的速度没有任何体验.\n后来看到了另一个docker镜像,有arm64的版本,于是想在自己的树莓派上部署一个个人图书馆,方便使用.\nCalibre-web Calibre-web https://github.com/janeczku/calibre-web/ 原项目地址\n其中作者介绍了两个Docker Images\nTechnosoft2000 - x64   Docker Hub - https://hub.docker.com/r/technosoft2000/calibre-web/\n  Github - https://github.com/Technosoft2000/docker-calibre-web\nIncludes the Calibre ebook-convert binary. 包含了书籍格式转换工具\n The “path to convertertool” should be set to /opt/calibre/ebook-convert    LinuxServer - x64, armhf, aarch64   Docker Hub - https://hub.docker.com/r/linuxserver/calibre-web/\n  Github - https://github.com/linuxserver/docker-calibre-web\n  Github - (Optional Calibre layer) - https://github.com/linuxserver/docker-calibre-web/tree/calibre\nThis image has the option to pull in an extra docker manifest layer to include the Calibre ebook-convert binary. Just include the environmental variable DOCKER_MODS=linuxserver/calibre-web:calibre in your docker run/docker compose file. (x64 only) 这个镜像将书籍格式转换工具分离,有需要可以自行添加\n  这里我们选择第二个作为树莓派要部署的镜像\n拉取镜像 docker pull linuxserver/calibre-web 建议先更换镜像源,速度会快上很多\n创建容器 sudo docker create --name=calibre-usb -v /media/pi/calibre:/config -v /media/pi/calibre/books:/books -p 8083:8083 linuxserver/calibre-web 解释一下 --name是创建的容器名,取个好记的就行\n-v第一个是配置文件的存放地 第二个为书籍数据库的存放地 建议先自行创建文件夹,或者直接在命令中设置目录,命令会自动创建\n-p为主机端口与容器端口的映射 该例中为主机的8083与容器的8083映射,主机的端口可修改,容器的保持8083\n最后一项为镜像的全称\n防火墙(安全组)配置 如果有启用防火墙 需要开放主机的8083tcp端口\nufw allow 8083/tcp 或 firewall-cmd --zone=public --add-port=8083/tcp --permanent firewall-cmd --complete-reload #重新载入防火墙配置 树莓派如果只在局域网内使用的话,到这就可以结束了\n如果希望能够在外网访问,还需要在路由器进行8083端口的端口映射\n登录 浏览器输入ip:8083进入控制台 首先需要设置数据库位置\n我们之前命令中的配置文件的位置就是容器docker的根目录\n现在容器的根目录下只有一个/books文件夹,这个文件夹就是我们的数据库位置\n必须使用电脑上的calibre软件先生成一个新的metadata.db数据库文件然后将这个文件上传到之前建立的calibre文件夹内。 然后再在上面的数据库位置中填入/books，才能设置成功，不然会一直提示DB 路径设置不正确\n我这有一份现成的可供大家使用metadata.db\n最后需要对docker的配置文件文件夹进行读写权限的设置,否则会出现封面缺失,上传失败的问题 无脑777\nchmod -R 777 /calibre # 位置视个人情况 管理员默认帐号为admin 密码为admin123 建议先做好帐号的添加与管理\n 至此结束\n","permalink":"https://zweisamkeiten.github.io/posts/%E6%A0%91%E8%8E%93%E6%B4%BEdocker%E6%90%AD%E5%BB%BAcalibre-web/","summary":"前言 之前接触过calibre-web这个项目,确实是一个非常好的管理书籍的项目,同时又不是calibre原软件一成不变的界面风格.最近接触到","title":"树莓派docker搭建Calibre Web"},{"content":"前言 bumblebee 的 optirun 的兼容性问题； primusrun 关垂直同步的画面撕裂，开垂直同步的输入延迟；直接使用 NVIDIA 的耗电等一系列双显卡之痛之后，发现 optimus-manager 十分适合。可以设置开机默认使用 Intel 还是 Nvidia ，可以随时在这两者之间切换。\n 安装 安装前须知: optimus-manager 上游直接支持的Display Manager为 sddm 、 lightdm 和 gdm ，其他 DM 要用的话需要额外配置 Xsetup 脚本，这里不介绍。\n可以通过AUR安装optimus-manager\n也可以通过archlinxucn源直接安装\n$ sudo pacman -Sy optimus-manager 安装完成后开启服务\n$ sudo systemctl enable optimus-manager.service 配置 首先确保/etc/X11/xorg.conf和/ext/X11/xorg.conf.d下没有其他显卡与显示相关的配置,如果有的话可以直接删除,因为optimus-manager会自动生成显卡配置/etc/X11/xorg.conf.d/10-optimus-manager.conf\n如果已经安装bumblebee,请执行以下命令关闭bumblebeed\n$ sudo systemctl disable bumblebeed 检查/etc/modules-load.d/以确保bbswitch模块不要在开机时被加载\n最后安装nvidia闭源驱动\n$ sudo pacman -S nvidia-utils 配置 optimus-maager $ sudo mkdir -p /etc/optimus-manager 将optimus-manager默认配置复制至/etc/optimus-manager进行另外配置\n$ sudo cp /usr/share/optimus-manager.conf /etc/optimus-manager/optimus-manager.conf $ sudo vim /etc/optimus-manager/optimus-manager.conf 各选项配置\n[optimus] # 切换方式，可能值： nouveau, bbswitch, none # 如果选择 none，Nvidia在你使用 Intel 的时候将一直处于通电状态 # 如果使用 bbswitch, 在你使用 Intel 的时候将无法使用 Nvidia 上的 # 接口输出到外接显示器。 # 使用 bbswitch 必须安装 bbswitch 或者 bbswitch-dkms。 # bbswitch 暂时还不支持 10系以上显卡 (真的不支持？还是 ACPI 锁死问题呢？) switching=nouveau # 在 Intel 模式下开启 PCI 电源管理 # 如果不开的话会你会发现耗电量会比较大 # 如果已经使用了 bbswitch 这个选项会被忽略 pci_power_control=yes [intel] # 使用哪一个 Intel 驱动 # 可能值: modesetting, intel driver=modesetting # 加速模式 # intel 驱动专属，对modesetting无效 # 可能值 : sna, xna # 留空以使用默认值 accel= # 开启 TearFree 选项 # intel驱动的选项, 对modesetting无效 # 可能值: yes, no # 留空以使用默认值 tearfree= # DRI 版本. 可能值 : 2, 3 DRI=3 # 是否对 nouveau 开启 modesetting. # 对 intel 驱动无效 # 如果你使用 bbswitch 作为切换方式，这个选项会被忽略 modeset=yes [nvidia] # DRI版本，可能值： 2, 3 DRI=3 # 是否开启 modesetting，如果要使用 PRIME Synchronization 来避免 # 画面撕裂的话，必须开启 modeset=yes # 是否开启 NVIDIA 驱动的 NVreg_UsePageAttributeTable 选项 # 推荐开启，否则可能会导致 CPU 低性能。 PAT=yes # DPI 值. 帮你设置登录管理器的 DPI # 原理是启动登录管理器的时候执行： # xrandr --dpi # 留空以使用默认值 DPI= # Nvidia 专有选项，选项之间以逗号分隔 # 支持的选项: # - overclocking : 开启 CoolBits 并在 NVIDIA 面板中解锁超频选项。 # - triple_buffer : 开启三倍缓冲 options=overclocking 配置完成后直接重启生效\n用法 确保optimus-manager.service已经运行\n运行\n$ optimus-manager --switch nvidia 切换至nvidia\n运行\n$ optimus-manager --switch intel 切换至intel\n运行\n$ optimus-manager --set-startup=intel 设置开机使用intel\n图形前端 optimus-manager-qt optimus-manager-qt gnome-shell 扩展 optimus-manager-argos kde`用户可以从`archlinuxcn`源安装`optimus-manager-qt-kde $ sudo pacman -Sy optimus-manager-qt-kde 非kde用户, 安装optimus-manager-qt\n$ sudo pamcna -Sy optimus-manager-qt 转载自https://blog.edward-p.xyz/optimus-manager/\n","permalink":"https://zweisamkeiten.github.io/posts/linux%E4%B8%8B%E6%9C%80%E4%BD%B3%E6%98%BE%E5%8D%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","summary":"前言 bumblebee 的 optirun 的兼容性问题； primusrun 关垂直同步的画面撕裂，开垂直同步的输入延迟；直接使用 NVIDIA 的耗电等一系列双显卡之痛之后，发现 optimus-manager 十分适合。可以设置开机默","title":"Linux下最佳显卡解决方案"},{"content":"  在arch系统的安装过程中,我因为个人的网络环境而有设置静态ip的需求，因而没有选用dhcpcd服务来获取动态ip\n在此记录设置静态ip过程中的思路与一些工具的使用，还有永久固定静态ip的方法\n 前置知识 排查网络连接问题 1. 网络接口网卡设备可见且已经启用 1. ip link 2. ip link set 网卡名 up 2. 已经连接到网络. 网线已经接好 或者已经连接到无线局域网 3. 网络接口设备拥有一个ip地址 4. 路由表设置正确 6. 可以ping通一个本地ip地址 例如默认网关 7. 可以ping通一个公网ip地址 例如8.8.8.8 谷歌的DNS服务器 8. 检查是否能解析域名 例如baidu.com Ping ping用于测试是否可以连接到某个主机\n$ ping www.example.com PING www.example.com (93.184.216.34): 56(84) data bytes 64 bytes from 93.184.216.34: icmp_seq=0 ttl=56 time=11.632 ms 64 bytes from 93.184.216.34: icmp_seq=1 ttl=56 time=11.726 ms 64 bytes from 93.184.216.34: icmp_seq=2 ttl=56 time=10.683 ms ... 如果没有收到回应，原因可能与你的默认网关配置或者你的网络接入服务商（ISP）有关。\niproute2使用 iproute2 是 base 元包 的依赖，提供 ip 命令行接口，用于管理 网络接口，IP 地址 和 路由表。注意使用 ip 进行的配置会在重启后丢失。要进行永久配置，可以使用 网络管理器 或通过脚本和 systemd 单元 使 ip 命令自动化。同时需要注意的是 ip 命令通常能够缩写，为了清楚起见，本文对其进行了详细说明。\n网络接口 默认情况下， udev 使用 可预测的网络接口名称 分配给你的网络接口，该名称以 en (有线/以太网) ，wl (无线/WLAN) 或 ww (WWAN) 。\n列出网络接口 有线和无线接口名称都可以通过 ls /sys/class/net 或 ip link 找到。要注意的是 lo 是 Loop 设备 ，不被用于建立网络连接。\n启用禁用网络接口 ip link set \u0026#39;interface\u0026#39;网络接口名 up|down 启用与禁用网络接口\n列出IP地址 ip address show 将IP地址添加到接口 ip address add address地址/prefix_len子网掩码长度 broadcast 广播范围 + dev interface网络接口 + 是使 ip 从 IP 地址和子网掩码派生 broadcast address 的特殊符号\n例如ip address add 192.168.3.18/24 broadcast 192.168.3.255 dev wlo1 或ip address add 192.168.3.18/24 broadcast + dev wlo1 address可缩写为addr 实际操作中省略广播貌似可行\n将IP地址从接口中删除 ip address del address/prefix_len dev interface 删除某个特定接口的地址\nip address flush dev interface 列出路由表 列出IPV4路由\nip route show 列出IPV6路由\nip -6 route 添加路由表,即网关 ip route add PREFIX via address dev interface 一般默认PREFIX为default 例如\nip route add default via 192.168.3.1 dev wlo1 网关ip一般为网段.1或网段.254\n删除路由表 ip route del PREFIX via address dev interface 删除某接口所有路由表\nip route flush dev wlo1  现在我们正式开始设置静态ip\n手动设置静态IP地址 ip address add 192.168.3.18/24 broadcast 192.168.3.255 dev wlo1 ip route add defalut via 192.168.3.254 dev wlo1 编辑/etc/resolv.conf 添加DNS服务器\nnameserver 192.168.3.254 也可改为一些公共dns\n 永久固定ip 每次重启都得手动执行命令就显得有些麻烦。因此通过系统服务与脚本来固定ip地址\n首先先为systemd服务创建一个网络设定的配置 以网络接口设备名取代以下的interface\nvim /etc/conf.d/network@interface -------------------------------- address=192.168.3.18 netmask=24 broadcast=192.168.3.255 gateway=192.168.3.254 具体ip与网关根据个人设置\n建立systemd unit档案\nvim /etc/systemd/system/network@.service --------------------------------------- [Unit] Description=Network connectivity (%i) Wants=network.target Before=network.target BindsTo=sys-subsystem-net-devices-%i.device After=sys-subsystem-net-devices-%i.device [Service] Type=oneshot RemainAfterExit=yes EnvironmentFile=/etc/conf.d/network@%i ExecStart=/usr/bin/ip link set dev %i up ExecStart=/usr/bin/ip addr add ${address}/${netmask} broadcast ${broadcast} dev %i ExecStart=/usr/bin/sh -c \u0026#39;test -n ${gateway} \u0026amp;\u0026amp; /usr/bin/ip route add default via ${gateway}\u0026#39; ExecStop=/usr/bin/ip addr flush dev %i ExecStop=/usr/bin/ip link set dev %i down [Install] WantedBy=multi-user.target 启用该unit并将其启用，加入网络接口名称\nsystemctl enable network@网络接口.service systemctl start network@网络接口.service  至此结束\n  ","permalink":"https://zweisamkeiten.github.io/posts/arch%E7%B3%BBlinux%E9%9D%99%E6%80%81ip%E8%AE%BE%E7%BD%AE%E4%B8%8E%E5%9B%BA%E5%AE%9A/","summary":"在arch系统的安装过程中,我因为个人的网络环境而有设置静态ip的需求，因而没有选用dhcpcd服务来获取动态ip 在此记录设置静态ip过程中","title":"Arch系linux静态ip设置与固定"},{"content":"前言 lamp 的全称是linux + apache + mysql +php lnmp 的全称是linux + nginx + mysql + php （国外喜欢简称为LEMP，搜英文资料需要搜LEMP） Nginx 特性Nginx 性能稳定、功能丰富、运维简单、处理静态文件速度快且消耗系统资源极少。\n 相比 Apache，用 Nginx 作为 Web 服务器：使用资源更少，支持更多并发连接，效率更高。 作为负载均衡服务器：Nginx 既可在内部直接支持 Rails 和 PHP，也可支持作为 HTTP 代理服务器对外进行服务。Nginx 用 C 编写而成， 不论是系统资源开销还是 CPU 使用效率都比 Perlbal 要好的多。 作为邮件代理服务器：Nginx 同时也是一款非常优秀的邮件代理服务器（最早开发这个产品的目的之一，是作为邮件代理服务器）。 反向代理可以根据url将请求转向于不同用途的集群，比如图片请求，转向图片服务器集群；视频请求，转身视频服务器集群。  nginx是一款轻量级的web服务器/反向代理服务器/电子邮件代理服务器，安装非常简单，配置文件也很简洁（还支持 perl 语法）。Nginx 支持平滑加载新配置，还能够在不间断服务的情况下进行软件版本升级。\n作者：西蒙宫 链接：https://www.zhihu.com/question/19697826/answer/142110770 来源：知乎 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n在本指南中，我们将安装一个 LNMP Stack (Nginx，MySQL，PHP) ，并在 Ubuntu Server 18.04 / 19.10上配置一个 web 服务器。 先决条件: 你应该使用具有sudo权限的用户账户，或者root账户  1. Install Nginx 让我们从更新软件包列表和在 Ubuntu 18.04 / 19.10上安装 Nginx 开始。 下面我们用 \u0026amp; \u0026amp; 分隔两个命令。 第一个命令将更新包列表，以确保您获得 Nginx 的最新版本和依赖项。 然后，第二个命令将下载并安装 Nginx。\nsudo apt update \u0026amp;\u0026amp; sudo apt install nginx 安装后，检查 Nginx 服务是否正在运行\nsudo service nginx status 如果 Nginx 正常运行，您应该会看到下面的绿色活动状态。\n● nginx.service - A high performance web server and a reverse proxy server Loaded: loaded (/lib/systemd/system/nginx.service; enabled; vendor preset: enabled) Active: active (running) since Wed 2018-05-09 20:42:29 UTC; 2min 39s ago Docs: man:nginx(8) Process: 27688 ExecStart=/usr/sbin/nginx -g daemon on; master_process on; (code=exited, status=0/SUCCESS) Process: 27681 ExecStartPre=/usr/sbin/nginx -t -q -g daemon on; master_process on; (code=exited, status=0/SUCCESS) Main PID: 27693 (nginx) Tasks: 2 (limit: 1153) CGroup: /system.slice/nginx.service ├─27693 nginx: master process /usr/sbin/nginx -g daemon on; master_process on; └─27695 nginx: worker process 您可能需要按 q 退出服务状态。\n2. Configure Firewall 配置防火墙\n如果您还没有这样做，建议您启用 ufw 防火墙并为 Nginx 添加一个规则。 在启用 ufw 防火墙之前，请确保为 SSH 添加了一个规则，否则，如果远程连接，可能会被锁定在服务器之外。\nsudo ufw allow OpenSSH 查看可以开放的应用\nsudo ufw app list 现在为Nginx增加一条规则\nsudo ufw allow \u0026#39;Nginx HTTP\u0026#39; 可以看到\nRule added Rule added (v6) 启用ufwfirewall\nsudo ufw enable 按y允许启用\n现在检查防火墙状态\nsudo ufw status Status: active To Action From -- ------ ---- OpenSSH ALLOW Anywhere Nginx HTTP ALLOW Anywhere OpenSSH (v6) ALLOW Anywhere (v6) Nginx HTTP (v6) ALLOW Anywhere (v6) 就是这样! 你在 Ubuntu 18.04 / 19.10上的 Nginx 网络服务器现在应该准备好了。\n3. Test Nginx 进入你的网页浏览器，访问你的域名或 IP 地址。 如果你还没有域名，并且不知道你的 IP 地址，你可以通过运行:\nip a | grep -Eo \u0026#39;inet (addr:)?([0-9]*\\.){3}[0-9]*\u0026#39; | grep -Eo \u0026#39;([0-9]*\\.){3}[0-9]*\u0026#39; | grep -v \u0026#39;127.0.0.1\u0026#39; 如果使用的是云服务器 则可以直接使用公网ip在本地的浏览器输入\n您可以在文档根目录 / var / www / html 中找到这个 Nginx 默认欢迎页面。 要在文本编辑器中编辑这个文件:\nsudo vim /var/www/html/index.nginx-debian.html 你的 Nginx 网络服务器已经准备好了！ 现在可以在 / var / www / html 目录中添加自己的 html 文件和图像。\n4. Install MySQL 让我们从更新软件包列表和在 Ubuntu 18.04 / 19.10上安装 MySQL 开始。 下面我们用 \u0026amp; \u0026amp; 分隔两个命令。 第一个命令将更新包列表，以确保您获得 MySQL 的最新版本和依赖项。 然后，第二个命令将下载并安装 MySQL。\nsudo apt update \u0026amp;\u0026amp; apt install mysql-server 当提示安装 MySQL 包时，按 y 键和 ENTER 键。 一旦包安装程序完成，我们就可以检查 MySQL 服务是否正在运行。\nsudo service mysql status 如果运行，你会看到一个绿色的活动状态，如下所示。\n● mysql.service - MySQL Community Server Loaded: loaded (/lib/systemd/system/mysql.service; enabled; vendor preset: enabled) Active: active (running) since since Wed 2018-05-09 21:10:24 UTC; 16s ago Main PID: 30545 (mysqld) Tasks: 27 (limit: 1153) CGroup: /system.slice/mysql.service └─30545 /usr/sbin/mysqld --daemonize --pid-file=/run/mysqld/mysqld.pid 您可能需要按 q 退出服务状态。\n5.配置 MySQL Security 现在应该运行 MySQL 安全安装来配置 MySQL 服务器的安全性。\nsudo mysql_secure_installation 如果您在步骤1中创建了根密码，可能会提示您在这里输入它。 否则你将被要求创建一个。 (在这里输入密码)\n您将被问及是否需要设置验证密码插件。 除非您出于某种原因希望实施严格的密码策略，否则实际上没有必要这样做。\nSecuring the MySQL server deployment. Connecting to MySQL using a blank password. VALIDATE PASSWORD PLUGIN can be used to test passwords and improve security. It checks the strength of password and allows the users to set only those passwords which are secure enough. Would you like to setup VALIDATE PASSWORD plugin? Press y|Y for Yes, any other key for No: 如果您不想设置验证密码插件，请在这里按 n 和 ENTER。\nPlease set the password for root here. New password: Re-enter new password: 如果在步骤1中没有创建 root 密码，那么现在必须在这里创建一个。 生成一个强密码并输入它。 请注意，当您在 Linux 中输入密码时，输入时不会显示任何信息(没有星号或点)。\nBy default, a MySQL installation has an anonymous user, allowing anyone to log into MySQL without having to have a user account created for them. This is intended only for testing, and to make the installation go a bit smoother. You should remove them before moving into a production environment. Remove anonymous users? (Press y|Y for Yes, any other key for No) : 按 y 和 ENTER 以删除匿名用户。\nNormally, root should only be allowed to connect from \u0026#39;localhost\u0026#39;. This ensures that someone cannot guess at the root password from the network. Disallow root login remotely? (Press y|Y for Yes, any other key for No) : 按 y 和 ENTER 远程禁止 root 登录。 这将防止僵尸和黑客试图猜测根密码。\nBy default, MySQL comes with a database named \u0026#39;test\u0026#39; that anyone can access. This is also intended only for testing, and should be removed before moving into a production environment. Remove test database and access to it? (Press y|Y for Yes, any other key for No) : 按 y 和 ENTER 以删除测试数据库。\nReloading the privilege tables will ensure that all changes made so far will take effect immediately. Reload privilege tables now? (Press y|Y for Yes, any other key for No) : 按 y 和 ENTER 重新加载特权表。\n完成\n作为测试，您可以登录到 MySQL 服务器并运行 version 命令。\nsudo mysqladmin -p -u root version 输入您先前创建的 MySQL root 密码，您应该会看到以下内容:\nmysqladmin Ver 8.42 Distrib 5.7.22, for Linux on x86_64 Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Server version 5.7.22-0ubuntu18.04.1 Protocol version 10 Connection Localhost via UNIX socket UNIX socket /var/run/mysqld/mysqld.sock Uptime: 4 min 28 sec Threads: 1 Questions: 15 Slow queries: 0 Opens: 113 Flush tables: 1 Open tables: 106 Queries per second avg: 0.055 您现在已经成功地为 Ubuntu 18.04 / 19.10安装和配置了 MySQL！ 继续下一步安装 PHP。\n6. Install PHP 与 Apache 不同，Nginx 不包含本地 PHP 处理。 为此，我们必须安装 PHP-FPM (FastCGI 流程管理器)。 Fpm 是一种替代的 PHP FastCGI 实现，具有一些对重载站点有用的附加特性。\n让我们首先更新软件包列表并在 Ubuntu 18.04 / 19.10上安装 PHP-FPM。 我们还将安装 PHP-MySQL，以允许 PHP 与 MySQL 数据库通信。 下面我们用 \u0026amp; \u0026amp; 分隔两个命令。 第一个命令将更新包列表，以确保您获得 PHP-FPM 和 php-mysql 的最新版本和依赖项。 然后，第二个命令将下载并安装 PHP-FPM 和 php-mysql。 请求继续时按 y 和 ENTER。\nsudo apt update \u0026amp;\u0026amp; sudo apt install php-fpm php-mysql 一旦安装，请检查 PHP 版本。\nphp --version 如果 PHP 安装正确，您应该会看到与下面类似的内容。\nPHP 7.2.3-1ubuntu1 (cli) (built: Mar 14 2018 22:03:58) ( NTS ) Copyright (c) 1997-2018 The PHP Group Zend Engine v3.2.0, Copyright (c) 1998-2018 Zend Technologies with Zend OPcache v7.2.3-1ubuntu1, Copyright (c) 1999-2018, by Zend Technologies 上面我们使用的是 PHP 版本7.2，不过这可能是一个更新的版本，具体取决于存储库中的哪个包。\n根据您安装的是哪个版本的 Nginx 和 PHP，您可能需要手动配置 Nginx 将连接到的 PHP 套接字的位置。\n列出目录 / var / run / php / 的内容\nls /var/run/php/ 你应该在这里看到一些条目。\nphp7.2-fpm.pid php7.2-fpm.sock 上面我们可以看到这个接口被称为 php7.2-fpm.sock。请记住这一点，因为下一步可能需要它。\n7. Configure Nginx for PHP 现在我们需要对 Nginx 服务器块进行一些更改。\n服务器块的位置可能根据您的设置而有所不同。默认情况下，它位于 / etc / nginx / sites-available / default。\n但是，如果您以前在我们前面的一个指南中为多个域设置了自定义服务器块，那么您将需要将 PHP 指令分别添加到每个服务器块中。 典型的自定义服务器块文件位置是 / etc / nginx / sites-available / mytest1. com。\n目前，我们假设您正在使用默认值。\nsudo vim /etc/nginx/sites-availiable/default 查找index.html\n在index.html前添加index.php\nindex index.php index.html index.htm index.nginx-debian.html; 查找server_name 在这里输入您的服务器 IP 或域名(如果有的话)。\nserver_name YOUR_DOMAIN_OR_IP_HERE; 查找location ~ \\.php\n在这里，您需要通过删除下面用红色标记的行前的 # 符号来取消某些行的注释。\n还要确保 fastcgi 传递套接字路径的值是正确的。 例如，如果您安装了 PHP 版本7.2，套接字应该是: / var / run / PHP / php7.2-fpm。 袜子\n... location ~ \\.php$ { include snippets/fastcgi-php.conf; # # # With php-fpm (or other unix sockets): fastcgi_pass unix:/var/run/php/php7.2-fpm.sock; # # With php-cgi (or other tcp sockets): # fastcgi_pass 127.0.0.1:9000; 这一行不应该取消注释否则会与上一行冲突 } ... 保存关闭\n现在检查配置文件以确保没有语法错误。 任何错误都可能导致 web 服务器在重启时崩溃。\nsudo nginx -t nginx: the configuration file /etc/nginx/nginx.conf syntax is ok nginx: configuration file /etc/nginx/nginx.conf test is successful 如果没有错误，可以重新加载 Nginx 配置。\nsudo service nginx reload 8. Test PHP 要查看在 Ubuntu 18.04 / 19.10上 PHP 是否正常工作，让我们在文档根目录中创建一个名为 info.PHP 的新 PHP 文件。 默认情况下，它位于 / var / www / html / ，或者如果您在以前的指南中设置了多个域，它可能位于像 / var / www / mytest1这样的地方。 Com / public html\n一旦你有了正确的文档根目录，使用 nano 文本编辑器创建一个新的 info.php 文件\nsudo vim /var/www/html/info.php 在新文件中键入或粘贴以下代码(如果在 Windows 中使用 PuTTY，右键单击粘贴)\n\u0026lt;?php phpinfo(); 保存退出现在，你可以通过浏览服务器的域名或公共 IP 地址，然后是 / info.php: http://your_domain_or_ip/info.php 地址，在你的网页浏览器中查看这个页面\n您现在已经在 Ubuntu 18.04 / 19.10上成功安装了针对 Nginx 的 PHP-FPM。\n","permalink":"https://zweisamkeiten.github.io/posts/lnmp%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE-ubuntu18-04/","summary":"前言 lamp 的全称是linux + apache + mysql +php lnmp 的全称是linux + nginx + mysql + php （国外喜欢简称为LEMP，搜英文资料需要搜LEMP） Nginx 特性Nginx 性能稳","title":"LNMP环境配置-Ubuntu18.04"},{"content":"Linux 让终端走代理的集中方法  通过让终端走代理的方式来加快gitclone的速度。\n 前期准备  认识代理的方式：代理是通过客户端与服务端通信，传输服务端能够访问到的资源文件，再由服务端客户端通信返回给客户端，从而间接访问服务端能够访问的资源\n 首先确定自己服务端代理的通讯协议。 socks，http，https\n方法一: 直接在终端中运行:\nexport http_proxy=http://proxyAddress:port 这里的proxyAddress替换为代理服务器的ip，如果客户端支持本地监听就替换为127.0.0.1\nport端口替换为代理端口\nExamples: export http_proxy=http://127.0.0.1:1080 export https_proxy=http://127.0.0.1:1080 export http_proxy=socks5://127.0.0.1:1080 这种方法的好处是只对当前打开的终端生效，当终端关闭代理就取消了\n方法二: 如果有永久保存代理服务器的需求\n把代理服务器地址写进shell配置文件 .bashrc或者.zshrc\nexport http_proxy=\u0026#34;http://localhost:port\u0026#34; export https_proxy=\u0026#34;http://localhost:prot\u0026#34; 可将冒号内的http替换为socks5\n或者干脆\nexport ALL_PROXY=socks5://127.0.0.1:1080 最后执行命令使之生效\nsource ~/.bashrc 方法三: Proxychains软件解决 Arch安装\nsudo pacman -S proxychains 安装完成后编辑/etc/proxychains.conf 注释掉proxy_dns这行，防止DNS污染\n在文件最末添加\nsocks5 127.0.0.1 1080 以后每次需要执行需要代理的命令时，就在命令前添加proxychains\n方法四： 修改对应工具的代理配置\n例如git\ngit config --global http.proxy 'socks://127.0.0.1:1080' git config --global https.proxy 'socks5:127.0.0.1:1080' 取消代理\ngit config --global --unset http.prox git config --global --unset https.proxy 以上解决的是git使用http协议的代理\nssh代理与之不同\nvim ~/.ssh/config #添加 # 这里必须是 github.com，因为这个跟我们 clone 代码时的链接有关 Host github.com # 如果用默认端口，这里是 github.com，如果想用443端口，这里就是 ssh.github.com 详见 https://help.github.com/articles/using-ssh-over-the-https-port/ HostName github.com # User git # 如果是 HTTP 代理，把下面这行取消注释，并把 proxyport 改成自己的 http 代理的端口 # ProxyCommand socat - PROXY:127.0.0.1:%h:%p,proxyport=20171 # 如果是 socks5 代理，则把下面这行取消注释，并把 6666 改成自己 socks5 代理的端口 # ProxyCommand nc -v -x 127.0.0.1:20170 %h %p 以上至此\n","permalink":"https://zweisamkeiten.github.io/posts/%E4%B8%80%E6%AC%A1%E8%A7%A3%E5%86%B3%E6%89%80%E6%9C%89%E4%BB%A3%E7%90%86%E9%97%AE%E9%A2%98/","summary":"Linux 让终端走代理的集中方法 通过让终端走代理的方式来加快gitclone的速度。 前期准备 认识代理的方式：代理是通过客户端与服务端通信，传输服务端","title":"一次解决所有代理问题"},{"content":"Linux下opencv环境搭建 1. 安装   从\nopencv官网\n下载源码sources包\n  选择版本4.2.0\n  解压\nunzip opencv-4.2.0.zip cd opencv-4.2.0 mkdir build cd build   生成cmake编译信息\ncmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local .. 解释一下各个参数\nCMAKE_BUILD_TYPE=Release\\Debug 分为发布和调试两种\nCMAKE_INSTALL_PREFIX 是安装位置\n.. 为从上级文件夹获取\n  编译\nmake -j7 #使用7核心进行编译   安装\nsudo make install 2. 配置 在\n/etc/ld.so.conf.d/ 文件夹下新建一个opencv4.conf, 里边\n写入\n/usr/local/lib     cd /etc/ld.so.conf.d/ sudo touch opencv4.conf #3.4.9版本就新建opencv3.conf sudo sh -c \u0026#39;echo \u0026#34;/usr/local/lib\u0026#34; \u0026gt; opencv4.conf #opencv3就一样替换 更新pkg-config: pkg-config使用来扫描opencv的存在的\nsudo ldconfig 复制pc文件，要不然测试提示错误:you should add the directory containing opencv.pc\nsudo cp -f /usr/local/lib/pkgconfig/opencv4.pc /usr/lib/pkgconfig/ #opencv4 sudo cp -f /usr/local/lib/pkgconfig/opencv.pc /usr/lib/pkgconfig/ #opencv 前面复制的路径，我自己的与我看到的教程中并不同，每个/usr/local/lib里都找一下能找到就行 后面的路径是pkg-config自动搜索的路径 引用freedestop\nThis variable is used to augment pkg-config's search path. On a typical Unix system, it will search in the directories /usr/lib/pkgconfig and /usr/share/pkgconfig. This will usually cover system installed modules. However, some local modules may be installed in a different prefix such as /usr/local. In that case, it's necessary to prepend the search path so that pkg-config can locate the .pc files. 测试:\npkg-config --libs opencv4 pkg-config --cflags opencv4 pkg-config --modversion opencv4 # 查看版本号 opencv3就将opencv4替换为opencv\n 添加环境变量是不用的, 这个是用来在编译时候指定Opencv版本用, 有的教程里有这部分,没必要:\n PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/lib/pkgconfig export PKG_CONFIG_PATH 3. 卸载 删掉opencv4.conf文件，然后在编译的build文件下运行\nsudo make uinstall  以上是Linux通用的编译方法, 但是对Arch系Linux不需要这么麻烦, 直接用源上编译好的即可:\nsudo pacman -S opencv 依赖\nsudo pacman -S opencv-samples qt5-base vtk 如果使用的是编译版本, 只需要指定opencv编译位置PATH_TO_BUILD : set(OpenCV_DIR PATH_TO_BUILD),我的CMakeLists.txt是: 如果使用Arch社区仓库的OPencv4, 可以显式指定opencv版本find_package(OpenCV 4 REQUIRED ). ","permalink":"https://zweisamkeiten.github.io/posts/linux%E4%B8%8Bopencv%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/","summary":"Linux下opencv环境搭建 1. 安装 从 opencv官网 下载源码sources包 选择版本4.2.0 解压 unzip opencv-4.2.0.zip cd opencv-4.2.0 mkdir build cd build 生成cmake编译信息","title":"Linux下opencv环境搭建"},{"content":"https://segmentfault.com/a/1190000013612471\n本文以CentOS 7/Mac 为例，介绍zsh的配置使用教程。\n准备 查看当前环境shell echo $SHELL 查看系统自带哪些shell cat /etc/shells 安装zsh yum install zsh # CentOS brew install zsh # mac安装 将zsh设置为默认shell chsh -s /bin/zsh # CentOS # Mac如下 # 在 /etc/shells 文件中加入如下一行 /usr/local/bin/zsh # 接着运行 chsh -s /usr/local/bin/zsh 可以通过echo $SHELL查看当前默认的shell，如果没有改为/bin/zsh，那么需要重启shell。\noh-my-zsh 配置zsh是一件麻烦的事儿，爱折腾的程序猿怎么可能忍受？！于是，oh-my-zsh出现了，有了这个东东，zsh配置起来就方便多了！\n安装oh-my-zsh 有若干安装方式，介绍三种： 1.自动安装\nwget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh 2.手动安装\ngit clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc 3.真-手动安装\n 在oh-my-zsh的github主页，手动将zip包下载下来。 将zip包解压，拷贝至~/.oh-my-zsh目录。此处省略拷贝的操作步骤。 执行cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc  三选一即可，适合各种环境下的安装，然后需要source ~/.zshrc将配置生效。以下修改了.zshrc文件之后，都执行一下这个命令。\nzsh主题 通过如下命令可以查看可用的Theme：\n# ls ~/.oh-my-zsh/themes 如何修改zsh主题呢？ 编辑~/.zshrc文件，将ZSH_THEME=\u0026quot;candy\u0026quot;,即将主题修改为candy。我采用的steeef。\nzsh扩展 在~/.zshrc中找到plugins关键字，就可以自定义启用的插件了，系统默认加载git。\ngit插件 命令内容可以参考cat ~/.oh-my-zsh/plugins/git/git.plugin.zsh。\n常用的：\ngapa git add --patch gc! git commit -v --amend gcl git clone --recursive gclean git reset --hard \u0026amp;\u0026amp; git clean -dfx gcm git checkout master gcmsg git commit -m gco git checkout gd git diff gdca git diff --cached gp git push grbc git rebase --continue gst git status gup git pull --rebase 完整列表：https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git\nextract 解压文件用的，所有的压缩文件，都可以直接x filename，不用记忆参数\n当然，如果你想要用tar命令，可以使用tar -加tab键，zsh会列出参数的含义。\nautojump 按照官方文档介绍，需要使用如下命令安装，而不是一些博客中的介绍：\nyum install autojump-zsh # CentOS brew install autojump # Mac CentOS安装好之后，需要在~/.zshrc中配置一下，除了在plugins中增加autojump之外，还需要添加一行：\n[[ -s ~/.autojump/etc/profile.d/autojump.sh ]] \u0026amp;\u0026amp; . ~/.autojump/etc/profile.d/autojump.sh 安装好之后，记得source ~/.zshrc，然后你就可以通过j+目录名快速进行目录跳转。支持目录名的模糊匹配和自动补全。\n j -stat：可以查看历史路径库  zsh-autosuggestions zsh-autosuggestions\ngit clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions 在 ~/.zshrc 中配置\nplugins=(其他的插件 zsh-autosuggestions) 因为箭头→不太方便，在.zshrc中自定义补全快捷键为逗号，但是又一次遇到了需要输入逗号的情况，所以，并不太推荐如下修改：\nbindkey \u0026#39;,\u0026#39; autosuggest-accept zsh-syntax-highlighting zsh-syntax-highlighting\ngit clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting ~/.zshrc文件中配置：\nplugins=(其他的插件 zsh-syntax-highlighting) git-open git-open插件可以在你git项目下打开远程仓库浏览项目。\ngit clone https://github.com/paulirish/git-open.git $ZSH_CUSTOM/plugins/git-open bat bat 代替 cat cat 某个文件，可以在终端直接输出文件内容，bat 相比 cat 增加了行号和颜色高亮 👍\nbrew install bat 常用快捷键  命令历史记录  一旦在 shell 敲入正确命令并能执行后，shell 就会存储你所敲入命令的历史记录（存放在~/.zsh_history 文件中），方便再次运行之前的命令。可以按方向键↑和↓来查看之前执行过的命令 可以用 r来执行上一条命令 使用 ctrl-r 来搜索命令历史记录   命令别名  可以简化命令输入，在 .zshrc 中添加 alias shortcut='this is the origin command' 一行就相当于添加了别名 在命令行中输入 alias 可以查看所有的命令别名    使用技巧  连按两次Tab会列出所有的补全列表并直接开始选择，补全项可以使用 ctrl+n/p/f/b上下左右切换 智能跳转，安装了 autojump 之后，zsh 会自动记录你访问过的目录，通过 j 目录名 可以直接进行目录跳转，而且目录名支持模糊匹配和自动补全，例如你访问过 hadoop-1.0.0 目录，输入j hado 即可正确跳转。j –stat 可以看你的历史路径库。 命令选项补全。在zsh中只需要键入 tar - 就会列出所有的选项和帮助说明 在当前目录下输入 .. 或 … ，或直接输入当前目录名都可以跳转，你甚至不再需要输入 cd 命令了。在你知道路径的情况下，比如 /usr/local/bin 你可以输入cd /u/l/b 然后按进行补全快速输入 目录浏览和跳转：输入 d，即可列出你在这个会话里访问的目录列表，输入列表前的序号，即可直接跳转。 命令参数补全。键入kill 就会列出所有的进程名和对应的进程号 更智能的历史命令。在用或者方向上键查找历史命令时，zsh支持限制查找。比如，输入ls,然后再按方向上键，则只会查找用过的ls命令。而此时使用则会仍然按之前的方式查找，忽略 ls 多个终端会话共享历史记录 通配符搜索：ls -l **/*.sh，可以递归显示当前目录下的 shell 文件，文件少时可以代替 find。使用 **/ 来递归搜索 扩展环境变量，输入环境变量然后按 就可以转换成表达的值 在 .zshrc 中添加 setopt HIST_IGNORE_DUPS 可以消除重复记录，也可以利用sort -t \u0026quot;;\u0026quot; -k 2 -u ~/.zsh_history | sort -o ~/.zsh_history手动清除  最后  Github-Michael728/my-config-files 附上我的配置文件地址； zsh+on-my-zsh配置教程指南 本文地址  参考  wting/autojump–官方文档 powerline/fonts  Linux  终极 Shell Ubuntu 16.04下安装zsh和oh-my-zsh Ubuntu 下安装oh-my-zsh 掘金-Shell 中的极品– Zsh CentOS 7下autojump无法使用的可能原因 oh-my-zsh配置你的zsh提高shell逼格终极选择  Mac  zsh oh-my-zsh 插件推荐 zsh 全程指南-推荐 iterm主题下载 程序员内功系列–iTerm与Zsh篇 Mac 下配置终端环境 iTerm2 + Zsh + Oh My Zsh + tmux  ","permalink":"https://zweisamkeiten.github.io/posts/zsh-oh-my-zsh/","summary":"https://segmentfault.com/a/1190000013612471 本文以CentOS 7/Mac 为例，介绍zsh的配置使用教程。 准备 查看当前环境shell echo $SHELL 查看系统自带哪些shell cat /etc/shells 安装zsh yum install zsh # CentOS brew install zsh","title":"Zsh Oh My Zsh"}]